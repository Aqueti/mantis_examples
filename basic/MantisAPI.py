# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MantisPyAPI', [dirname(__file__)])
        except ImportError:
            import _MantisPyAPI
            return _MantisPyAPI
        if fp is not None:
            try:
                _mod = imp.load_module('_MantisPyAPI', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _MantisAPI = swig_import_helper()
    del swig_import_helper
else:
    import _MantisAPI
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class AtlPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtlPoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _MantisAPI.AtlPoint_x_set
    __swig_getmethods__["x"] = _MantisAPI.AtlPoint_x_get
    if _newclass:
        x = _swig_property(_MantisAPI.AtlPoint_x_get, _MantisAPI.AtlPoint_x_set)
    __swig_setmethods__["y"] = _MantisAPI.AtlPoint_y_set
    __swig_getmethods__["y"] = _MantisAPI.AtlPoint_y_get
    if _newclass:
        y = _swig_property(_MantisAPI.AtlPoint_y_get, _MantisAPI.AtlPoint_y_set)

    def __init__(self):
        this = _MantisAPI.new_AtlPoint()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_AtlPoint
    __del__ = lambda self: None
AtlPoint_swigregister = _MantisAPI.AtlPoint_swigregister
AtlPoint_swigregister(AtlPoint)

class AtlPointNormalized(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlPointNormalized, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtlPointNormalized, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _MantisAPI.AtlPointNormalized_x_set
    __swig_getmethods__["x"] = _MantisAPI.AtlPointNormalized_x_get
    if _newclass:
        x = _swig_property(_MantisAPI.AtlPointNormalized_x_get, _MantisAPI.AtlPointNormalized_x_set)
    __swig_setmethods__["y"] = _MantisAPI.AtlPointNormalized_y_set
    __swig_getmethods__["y"] = _MantisAPI.AtlPointNormalized_y_get
    if _newclass:
        y = _swig_property(_MantisAPI.AtlPointNormalized_y_get, _MantisAPI.AtlPointNormalized_y_set)

    def __init__(self):
        this = _MantisAPI.new_AtlPointNormalized()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_AtlPointNormalized
    __del__ = lambda self: None
AtlPointNormalized_swigregister = _MantisAPI.AtlPointNormalized_swigregister
AtlPointNormalized_swigregister(AtlPointNormalized)

class AtlRectangle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlRectangle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtlRectangle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xMin"] = _MantisAPI.AtlRectangle_xMin_set
    __swig_getmethods__["xMin"] = _MantisAPI.AtlRectangle_xMin_get
    if _newclass:
        xMin = _swig_property(_MantisAPI.AtlRectangle_xMin_get, _MantisAPI.AtlRectangle_xMin_set)
    __swig_setmethods__["xMax"] = _MantisAPI.AtlRectangle_xMax_set
    __swig_getmethods__["xMax"] = _MantisAPI.AtlRectangle_xMax_get
    if _newclass:
        xMax = _swig_property(_MantisAPI.AtlRectangle_xMax_get, _MantisAPI.AtlRectangle_xMax_set)
    __swig_setmethods__["yMin"] = _MantisAPI.AtlRectangle_yMin_set
    __swig_getmethods__["yMin"] = _MantisAPI.AtlRectangle_yMin_get
    if _newclass:
        yMin = _swig_property(_MantisAPI.AtlRectangle_yMin_get, _MantisAPI.AtlRectangle_yMin_set)
    __swig_setmethods__["yMax"] = _MantisAPI.AtlRectangle_yMax_set
    __swig_getmethods__["yMax"] = _MantisAPI.AtlRectangle_yMax_get
    if _newclass:
        yMax = _swig_property(_MantisAPI.AtlRectangle_yMax_get, _MantisAPI.AtlRectangle_yMax_set)

    def __init__(self):
        this = _MantisAPI.new_AtlRectangle()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_AtlRectangle
    __del__ = lambda self: None
AtlRectangle_swigregister = _MantisAPI.AtlRectangle_swigregister
AtlRectangle_swigregister(AtlRectangle)

class AtlRectangleNormalized(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlRectangleNormalized, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtlRectangleNormalized, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xMin"] = _MantisAPI.AtlRectangleNormalized_xMin_set
    __swig_getmethods__["xMin"] = _MantisAPI.AtlRectangleNormalized_xMin_get
    if _newclass:
        xMin = _swig_property(_MantisAPI.AtlRectangleNormalized_xMin_get, _MantisAPI.AtlRectangleNormalized_xMin_set)
    __swig_setmethods__["xMax"] = _MantisAPI.AtlRectangleNormalized_xMax_set
    __swig_getmethods__["xMax"] = _MantisAPI.AtlRectangleNormalized_xMax_get
    if _newclass:
        xMax = _swig_property(_MantisAPI.AtlRectangleNormalized_xMax_get, _MantisAPI.AtlRectangleNormalized_xMax_set)
    __swig_setmethods__["yMin"] = _MantisAPI.AtlRectangleNormalized_yMin_set
    __swig_getmethods__["yMin"] = _MantisAPI.AtlRectangleNormalized_yMin_get
    if _newclass:
        yMin = _swig_property(_MantisAPI.AtlRectangleNormalized_yMin_get, _MantisAPI.AtlRectangleNormalized_yMin_set)
    __swig_setmethods__["yMax"] = _MantisAPI.AtlRectangleNormalized_yMax_set
    __swig_getmethods__["yMax"] = _MantisAPI.AtlRectangleNormalized_yMax_get
    if _newclass:
        yMax = _swig_property(_MantisAPI.AtlRectangleNormalized_yMax_get, _MantisAPI.AtlRectangleNormalized_yMax_set)

    def __init__(self):
        this = _MantisAPI.new_AtlRectangleNormalized()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_AtlRectangleNormalized
    __del__ = lambda self: None
AtlRectangleNormalized_swigregister = _MantisAPI.AtlRectangleNormalized_swigregister
AtlRectangleNormalized_swigregister(AtlRectangleNormalized)

class AtlSize(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlSize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtlSize, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _MantisAPI.AtlSize_width_set
    __swig_getmethods__["width"] = _MantisAPI.AtlSize_width_get
    if _newclass:
        width = _swig_property(_MantisAPI.AtlSize_width_get, _MantisAPI.AtlSize_width_set)
    __swig_setmethods__["height"] = _MantisAPI.AtlSize_height_set
    __swig_getmethods__["height"] = _MantisAPI.AtlSize_height_get
    if _newclass:
        height = _swig_property(_MantisAPI.AtlSize_height_get, _MantisAPI.AtlSize_height_set)

    def __init__(self):
        this = _MantisAPI.new_AtlSize()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_AtlSize
    __del__ = lambda self: None
AtlSize_swigregister = _MantisAPI.AtlSize_swigregister
AtlSize_swigregister(AtlSize)

class AtlAutoControlRegion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlAutoControlRegion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtlAutoControlRegion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["region"] = _MantisAPI.AtlAutoControlRegion_region_set
    __swig_getmethods__["region"] = _MantisAPI.AtlAutoControlRegion_region_get
    if _newclass:
        region = _swig_property(_MantisAPI.AtlAutoControlRegion_region_get, _MantisAPI.AtlAutoControlRegion_region_set)
    __swig_setmethods__["weight"] = _MantisAPI.AtlAutoControlRegion_weight_set
    __swig_getmethods__["weight"] = _MantisAPI.AtlAutoControlRegion_weight_get
    if _newclass:
        weight = _swig_property(_MantisAPI.AtlAutoControlRegion_weight_get, _MantisAPI.AtlAutoControlRegion_weight_set)

    def __init__(self):
        this = _MantisAPI.new_AtlAutoControlRegion()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_AtlAutoControlRegion
    __del__ = lambda self: None
AtlAutoControlRegion_swigregister = _MantisAPI.AtlAutoControlRegion_swigregister
AtlAutoControlRegion_swigregister(AtlAutoControlRegion)

class AtlRange_32s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlRange_32s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtlRange_32s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["min"] = _MantisAPI.AtlRange_32s_min_set
    __swig_getmethods__["min"] = _MantisAPI.AtlRange_32s_min_get
    if _newclass:
        min = _swig_property(_MantisAPI.AtlRange_32s_min_get, _MantisAPI.AtlRange_32s_min_set)
    __swig_setmethods__["max"] = _MantisAPI.AtlRange_32s_max_set
    __swig_getmethods__["max"] = _MantisAPI.AtlRange_32s_max_get
    if _newclass:
        max = _swig_property(_MantisAPI.AtlRange_32s_max_get, _MantisAPI.AtlRange_32s_max_set)

    def __init__(self):
        this = _MantisAPI.new_AtlRange_32s()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_AtlRange_32s
    __del__ = lambda self: None
AtlRange_32s_swigregister = _MantisAPI.AtlRange_32s_swigregister
AtlRange_32s_swigregister(AtlRange_32s)

class AtlRange_32u(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlRange_32u, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtlRange_32u, name)
    __repr__ = _swig_repr
    __swig_setmethods__["min"] = _MantisAPI.AtlRange_32u_min_set
    __swig_getmethods__["min"] = _MantisAPI.AtlRange_32u_min_get
    if _newclass:
        min = _swig_property(_MantisAPI.AtlRange_32u_min_get, _MantisAPI.AtlRange_32u_min_set)
    __swig_setmethods__["max"] = _MantisAPI.AtlRange_32u_max_set
    __swig_getmethods__["max"] = _MantisAPI.AtlRange_32u_max_get
    if _newclass:
        max = _swig_property(_MantisAPI.AtlRange_32u_max_get, _MantisAPI.AtlRange_32u_max_set)

    def __init__(self):
        this = _MantisAPI.new_AtlRange_32u()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_AtlRange_32u
    __del__ = lambda self: None
AtlRange_32u_swigregister = _MantisAPI.AtlRange_32u_swigregister
AtlRange_32u_swigregister(AtlRange_32u)

class AtlRange_32f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlRange_32f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtlRange_32f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["min"] = _MantisAPI.AtlRange_32f_min_set
    __swig_getmethods__["min"] = _MantisAPI.AtlRange_32f_min_get
    if _newclass:
        min = _swig_property(_MantisAPI.AtlRange_32f_min_get, _MantisAPI.AtlRange_32f_min_set)
    __swig_setmethods__["max"] = _MantisAPI.AtlRange_32f_max_set
    __swig_getmethods__["max"] = _MantisAPI.AtlRange_32f_max_get
    if _newclass:
        max = _swig_property(_MantisAPI.AtlRange_32f_max_get, _MantisAPI.AtlRange_32f_max_set)

    def __init__(self):
        this = _MantisAPI.new_AtlRange_32f()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_AtlRange_32f
    __del__ = lambda self: None
AtlRange_32f_swigregister = _MantisAPI.AtlRange_32f_swigregister
AtlRange_32f_swigregister(AtlRange_32f)

class AtlRange_64u(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlRange_64u, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtlRange_64u, name)
    __repr__ = _swig_repr
    __swig_setmethods__["min"] = _MantisAPI.AtlRange_64u_min_set
    __swig_getmethods__["min"] = _MantisAPI.AtlRange_64u_min_get
    if _newclass:
        min = _swig_property(_MantisAPI.AtlRange_64u_min_get, _MantisAPI.AtlRange_64u_min_set)
    __swig_setmethods__["max"] = _MantisAPI.AtlRange_64u_max_set
    __swig_getmethods__["max"] = _MantisAPI.AtlRange_64u_max_get
    if _newclass:
        max = _swig_property(_MantisAPI.AtlRange_64u_max_get, _MantisAPI.AtlRange_64u_max_set)

    def __init__(self):
        this = _MantisAPI.new_AtlRange_64u()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_AtlRange_64u
    __del__ = lambda self: None
AtlRange_64u_swigregister = _MantisAPI.AtlRange_64u_swigregister
AtlRange_64u_swigregister(AtlRange_64u)

class AtlRange_64s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlRange_64s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtlRange_64s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["min"] = _MantisAPI.AtlRange_64s_min_set
    __swig_getmethods__["min"] = _MantisAPI.AtlRange_64s_min_get
    if _newclass:
        min = _swig_property(_MantisAPI.AtlRange_64s_min_get, _MantisAPI.AtlRange_64s_min_set)
    __swig_setmethods__["max"] = _MantisAPI.AtlRange_64s_max_set
    __swig_getmethods__["max"] = _MantisAPI.AtlRange_64s_max_get
    if _newclass:
        max = _swig_property(_MantisAPI.AtlRange_64s_max_get, _MantisAPI.AtlRange_64s_max_set)

    def __init__(self):
        this = _MantisAPI.new_AtlRange_64s()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_AtlRange_64s
    __del__ = lambda self: None
AtlRange_64s_swigregister = _MantisAPI.AtlRange_64s_swigregister
AtlRange_64s_swigregister(AtlRange_64s)

class AtlRange_64f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlRange_64f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtlRange_64f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["min"] = _MantisAPI.AtlRange_64f_min_set
    __swig_getmethods__["min"] = _MantisAPI.AtlRange_64f_min_get
    if _newclass:
        min = _swig_property(_MantisAPI.AtlRange_64f_min_get, _MantisAPI.AtlRange_64f_min_set)
    __swig_setmethods__["max"] = _MantisAPI.AtlRange_64f_max_set
    __swig_getmethods__["max"] = _MantisAPI.AtlRange_64f_max_get
    if _newclass:
        max = _swig_property(_MantisAPI.AtlRange_64f_max_get, _MantisAPI.AtlRange_64f_max_set)

    def __init__(self):
        this = _MantisAPI.new_AtlRange_64f()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_AtlRange_64f
    __del__ = lambda self: None
AtlRange_64f_swigregister = _MantisAPI.AtlRange_64f_swigregister
AtlRange_64f_swigregister(AtlRange_64f)

class AtlFloat4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlFloat4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtlFloat4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _MantisAPI.AtlFloat4_x_set
    __swig_getmethods__["x"] = _MantisAPI.AtlFloat4_x_get
    if _newclass:
        x = _swig_property(_MantisAPI.AtlFloat4_x_get, _MantisAPI.AtlFloat4_x_set)
    __swig_setmethods__["y"] = _MantisAPI.AtlFloat4_y_set
    __swig_getmethods__["y"] = _MantisAPI.AtlFloat4_y_get
    if _newclass:
        y = _swig_property(_MantisAPI.AtlFloat4_y_get, _MantisAPI.AtlFloat4_y_set)
    __swig_setmethods__["z"] = _MantisAPI.AtlFloat4_z_set
    __swig_getmethods__["z"] = _MantisAPI.AtlFloat4_z_get
    if _newclass:
        z = _swig_property(_MantisAPI.AtlFloat4_z_get, _MantisAPI.AtlFloat4_z_set)
    __swig_setmethods__["w"] = _MantisAPI.AtlFloat4_w_set
    __swig_getmethods__["w"] = _MantisAPI.AtlFloat4_w_get
    if _newclass:
        w = _swig_property(_MantisAPI.AtlFloat4_w_get, _MantisAPI.AtlFloat4_w_set)

    def __init__(self):
        this = _MantisAPI.new_AtlFloat4()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_AtlFloat4
    __del__ = lambda self: None
AtlFloat4_swigregister = _MantisAPI.AtlFloat4_swigregister
AtlFloat4_swigregister(AtlFloat4)

class AtlWhiteBalance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlWhiteBalance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtlWhiteBalance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["red"] = _MantisAPI.AtlWhiteBalance_red_set
    __swig_getmethods__["red"] = _MantisAPI.AtlWhiteBalance_red_get
    if _newclass:
        red = _swig_property(_MantisAPI.AtlWhiteBalance_red_get, _MantisAPI.AtlWhiteBalance_red_set)
    __swig_setmethods__["blue"] = _MantisAPI.AtlWhiteBalance_blue_set
    __swig_getmethods__["blue"] = _MantisAPI.AtlWhiteBalance_blue_get
    if _newclass:
        blue = _swig_property(_MantisAPI.AtlWhiteBalance_blue_get, _MantisAPI.AtlWhiteBalance_blue_set)
    __swig_setmethods__["green"] = _MantisAPI.AtlWhiteBalance_green_set
    __swig_getmethods__["green"] = _MantisAPI.AtlWhiteBalance_green_get
    if _newclass:
        green = _swig_property(_MantisAPI.AtlWhiteBalance_green_get, _MantisAPI.AtlWhiteBalance_green_set)

    def __init__(self):
        this = _MantisAPI.new_AtlWhiteBalance()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_AtlWhiteBalance
    __del__ = lambda self: None
AtlWhiteBalance_swigregister = _MantisAPI.AtlWhiteBalance_swigregister
AtlWhiteBalance_swigregister(AtlWhiteBalance)

class AtlMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtlMessage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["systemId"] = _MantisAPI.AtlMessage_systemId_set
    __swig_getmethods__["systemId"] = _MantisAPI.AtlMessage_systemId_get
    if _newclass:
        systemId = _swig_property(_MantisAPI.AtlMessage_systemId_get, _MantisAPI.AtlMessage_systemId_set)
    __swig_setmethods__["moduleId"] = _MantisAPI.AtlMessage_moduleId_set
    __swig_getmethods__["moduleId"] = _MantisAPI.AtlMessage_moduleId_get
    if _newclass:
        moduleId = _swig_property(_MantisAPI.AtlMessage_moduleId_get, _MantisAPI.AtlMessage_moduleId_set)
    __swig_setmethods__["message"] = _MantisAPI.AtlMessage_message_set
    __swig_getmethods__["message"] = _MantisAPI.AtlMessage_message_get
    if _newclass:
        message = _swig_property(_MantisAPI.AtlMessage_message_get, _MantisAPI.AtlMessage_message_set)
    __swig_setmethods__["timestamp"] = _MantisAPI.AtlMessage_timestamp_set
    __swig_getmethods__["timestamp"] = _MantisAPI.AtlMessage_timestamp_get
    if _newclass:
        timestamp = _swig_property(_MantisAPI.AtlMessage_timestamp_get, _MantisAPI.AtlMessage_timestamp_set)

    def __init__(self):
        this = _MantisAPI.new_AtlMessage()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_AtlMessage
    __del__ = lambda self: None
AtlMessage_swigregister = _MantisAPI.AtlMessage_swigregister
AtlMessage_swigregister(AtlMessage)

class ACOS_CAMERA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ACOS_CAMERA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ACOS_CAMERA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["camID"] = _MantisAPI.ACOS_CAMERA_camID_set
    __swig_getmethods__["camID"] = _MantisAPI.ACOS_CAMERA_camID_get
    if _newclass:
        camID = _swig_property(_MantisAPI.ACOS_CAMERA_camID_get, _MantisAPI.ACOS_CAMERA_camID_set)
    __swig_setmethods__["numMCams"] = _MantisAPI.ACOS_CAMERA_numMCams_set
    __swig_getmethods__["numMCams"] = _MantisAPI.ACOS_CAMERA_numMCams_get
    if _newclass:
        numMCams = _swig_property(_MantisAPI.ACOS_CAMERA_numMCams_get, _MantisAPI.ACOS_CAMERA_numMCams_set)

    def __init__(self):
        this = _MantisAPI.new_ACOS_CAMERA()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_ACOS_CAMERA
    __del__ = lambda self: None
ACOS_CAMERA_swigregister = _MantisAPI.ACOS_CAMERA_swigregister
ACOS_CAMERA_swigregister(ACOS_CAMERA)

class ACOS_STREAM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ACOS_STREAM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ACOS_STREAM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["streamID"] = _MantisAPI.ACOS_STREAM_streamID_set
    __swig_getmethods__["streamID"] = _MantisAPI.ACOS_STREAM_streamID_get
    if _newclass:
        streamID = _swig_property(_MantisAPI.ACOS_STREAM_streamID_get, _MantisAPI.ACOS_STREAM_streamID_set)
    __swig_setmethods__["camera"] = _MantisAPI.ACOS_STREAM_camera_set
    __swig_getmethods__["camera"] = _MantisAPI.ACOS_STREAM_camera_get
    if _newclass:
        camera = _swig_property(_MantisAPI.ACOS_STREAM_camera_get, _MantisAPI.ACOS_STREAM_camera_set)

    def __init__(self):
        this = _MantisAPI.new_ACOS_STREAM()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_ACOS_STREAM
    __del__ = lambda self: None
ACOS_STREAM_swigregister = _MantisAPI.ACOS_STREAM_swigregister
ACOS_STREAM_swigregister(ACOS_STREAM)

class CAMERA_USER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAMERA_USER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CAMERA_USER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["username"] = _MantisAPI.CAMERA_USER_username_set
    __swig_getmethods__["username"] = _MantisAPI.CAMERA_USER_username_get
    if _newclass:
        username = _swig_property(_MantisAPI.CAMERA_USER_username_get, _MantisAPI.CAMERA_USER_username_set)
    __swig_setmethods__["password"] = _MantisAPI.CAMERA_USER_password_set
    __swig_getmethods__["password"] = _MantisAPI.CAMERA_USER_password_get
    if _newclass:
        password = _swig_property(_MantisAPI.CAMERA_USER_password_get, _MantisAPI.CAMERA_USER_password_set)
    __swig_setmethods__["userLevel"] = _MantisAPI.CAMERA_USER_userLevel_set
    __swig_getmethods__["userLevel"] = _MantisAPI.CAMERA_USER_userLevel_get
    if _newclass:
        userLevel = _swig_property(_MantisAPI.CAMERA_USER_userLevel_get, _MantisAPI.CAMERA_USER_userLevel_set)

    def __init__(self):
        this = _MantisAPI.new_CAMERA_USER()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_CAMERA_USER
    __del__ = lambda self: None
CAMERA_USER_swigregister = _MantisAPI.CAMERA_USER_swigregister
CAMERA_USER_swigregister(CAMERA_USER)

class PAIR_DOUBLE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PAIR_DOUBLE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PAIR_DOUBLE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["first"] = _MantisAPI.PAIR_DOUBLE_first_set
    __swig_getmethods__["first"] = _MantisAPI.PAIR_DOUBLE_first_get
    if _newclass:
        first = _swig_property(_MantisAPI.PAIR_DOUBLE_first_get, _MantisAPI.PAIR_DOUBLE_first_set)
    __swig_setmethods__["second"] = _MantisAPI.PAIR_DOUBLE_second_set
    __swig_getmethods__["second"] = _MantisAPI.PAIR_DOUBLE_second_get
    if _newclass:
        second = _swig_property(_MantisAPI.PAIR_DOUBLE_second_get, _MantisAPI.PAIR_DOUBLE_second_set)

    def __init__(self):
        this = _MantisAPI.new_PAIR_DOUBLE()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_PAIR_DOUBLE
    __del__ = lambda self: None
PAIR_DOUBLE_swigregister = _MantisAPI.PAIR_DOUBLE_swigregister
PAIR_DOUBLE_swigregister(PAIR_DOUBLE)

class CAMERA_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAMERA_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CAMERA_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["manufacturer"] = _MantisAPI.CAMERA_INFO_manufacturer_set
    __swig_getmethods__["manufacturer"] = _MantisAPI.CAMERA_INFO_manufacturer_get
    if _newclass:
        manufacturer = _swig_property(_MantisAPI.CAMERA_INFO_manufacturer_get, _MantisAPI.CAMERA_INFO_manufacturer_set)
    __swig_setmethods__["model"] = _MantisAPI.CAMERA_INFO_model_set
    __swig_getmethods__["model"] = _MantisAPI.CAMERA_INFO_model_get
    if _newclass:
        model = _swig_property(_MantisAPI.CAMERA_INFO_model_get, _MantisAPI.CAMERA_INFO_model_set)
    __swig_setmethods__["firmwareVersion"] = _MantisAPI.CAMERA_INFO_firmwareVersion_set
    __swig_getmethods__["firmwareVersion"] = _MantisAPI.CAMERA_INFO_firmwareVersion_get
    if _newclass:
        firmwareVersion = _swig_property(_MantisAPI.CAMERA_INFO_firmwareVersion_get, _MantisAPI.CAMERA_INFO_firmwareVersion_set)
    __swig_setmethods__["serialNumber"] = _MantisAPI.CAMERA_INFO_serialNumber_set
    __swig_getmethods__["serialNumber"] = _MantisAPI.CAMERA_INFO_serialNumber_get
    if _newclass:
        serialNumber = _swig_property(_MantisAPI.CAMERA_INFO_serialNumber_get, _MantisAPI.CAMERA_INFO_serialNumber_set)
    __swig_setmethods__["hardwareId"] = _MantisAPI.CAMERA_INFO_hardwareId_set
    __swig_getmethods__["hardwareId"] = _MantisAPI.CAMERA_INFO_hardwareId_get
    if _newclass:
        hardwareId = _swig_property(_MantisAPI.CAMERA_INFO_hardwareId_get, _MantisAPI.CAMERA_INFO_hardwareId_set)

    def __init__(self):
        this = _MantisAPI.new_CAMERA_INFO()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_CAMERA_INFO
    __del__ = lambda self: None
CAMERA_INFO_swigregister = _MantisAPI.CAMERA_INFO_swigregister
CAMERA_INFO_swigregister(CAMERA_INFO)

class H264(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, H264, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, H264, name)
    __repr__ = _swig_repr
    __swig_setmethods__["govLength"] = _MantisAPI.H264_govLength_set
    __swig_getmethods__["govLength"] = _MantisAPI.H264_govLength_get
    if _newclass:
        govLength = _swig_property(_MantisAPI.H264_govLength_get, _MantisAPI.H264_govLength_set)
    __swig_setmethods__["h264Profile"] = _MantisAPI.H264_h264Profile_set
    __swig_getmethods__["h264Profile"] = _MantisAPI.H264_h264Profile_get
    if _newclass:
        h264Profile = _swig_property(_MantisAPI.H264_h264Profile_get, _MantisAPI.H264_h264Profile_set)

    def __init__(self):
        this = _MantisAPI.new_H264()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_H264
    __del__ = lambda self: None
H264_swigregister = _MantisAPI.H264_swigregister
H264_swigregister(H264)

class VIDEO_SOURCE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VIDEO_SOURCE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VIDEO_SOURCE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _MantisAPI.VIDEO_SOURCE_width_set
    __swig_getmethods__["width"] = _MantisAPI.VIDEO_SOURCE_width_get
    if _newclass:
        width = _swig_property(_MantisAPI.VIDEO_SOURCE_width_get, _MantisAPI.VIDEO_SOURCE_width_set)
    __swig_setmethods__["height"] = _MantisAPI.VIDEO_SOURCE_height_set
    __swig_getmethods__["height"] = _MantisAPI.VIDEO_SOURCE_height_get
    if _newclass:
        height = _swig_property(_MantisAPI.VIDEO_SOURCE_height_get, _MantisAPI.VIDEO_SOURCE_height_set)

    def __init__(self):
        this = _MantisAPI.new_VIDEO_SOURCE()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_VIDEO_SOURCE
    __del__ = lambda self: None
VIDEO_SOURCE_swigregister = _MantisAPI.VIDEO_SOURCE_swigregister
VIDEO_SOURCE_swigregister(VIDEO_SOURCE)

class VIDEO_ENCODER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VIDEO_ENCODER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VIDEO_ENCODER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _MantisAPI.VIDEO_ENCODER_width_set
    __swig_getmethods__["width"] = _MantisAPI.VIDEO_ENCODER_width_get
    if _newclass:
        width = _swig_property(_MantisAPI.VIDEO_ENCODER_width_get, _MantisAPI.VIDEO_ENCODER_width_set)
    __swig_setmethods__["height"] = _MantisAPI.VIDEO_ENCODER_height_set
    __swig_getmethods__["height"] = _MantisAPI.VIDEO_ENCODER_height_get
    if _newclass:
        height = _swig_property(_MantisAPI.VIDEO_ENCODER_height_get, _MantisAPI.VIDEO_ENCODER_height_set)
    __swig_setmethods__["quality"] = _MantisAPI.VIDEO_ENCODER_quality_set
    __swig_getmethods__["quality"] = _MantisAPI.VIDEO_ENCODER_quality_get
    if _newclass:
        quality = _swig_property(_MantisAPI.VIDEO_ENCODER_quality_get, _MantisAPI.VIDEO_ENCODER_quality_set)
    __swig_setmethods__["sessionTimeout"] = _MantisAPI.VIDEO_ENCODER_sessionTimeout_set
    __swig_getmethods__["sessionTimeout"] = _MantisAPI.VIDEO_ENCODER_sessionTimeout_get
    if _newclass:
        sessionTimeout = _swig_property(_MantisAPI.VIDEO_ENCODER_sessionTimeout_get, _MantisAPI.VIDEO_ENCODER_sessionTimeout_set)
    __swig_setmethods__["framerate"] = _MantisAPI.VIDEO_ENCODER_framerate_set
    __swig_getmethods__["framerate"] = _MantisAPI.VIDEO_ENCODER_framerate_get
    if _newclass:
        framerate = _swig_property(_MantisAPI.VIDEO_ENCODER_framerate_get, _MantisAPI.VIDEO_ENCODER_framerate_set)
    __swig_setmethods__["encodingInterval"] = _MantisAPI.VIDEO_ENCODER_encodingInterval_set
    __swig_getmethods__["encodingInterval"] = _MantisAPI.VIDEO_ENCODER_encodingInterval_get
    if _newclass:
        encodingInterval = _swig_property(_MantisAPI.VIDEO_ENCODER_encodingInterval_get, _MantisAPI.VIDEO_ENCODER_encodingInterval_set)
    __swig_setmethods__["bitrateLimit"] = _MantisAPI.VIDEO_ENCODER_bitrateLimit_set
    __swig_getmethods__["bitrateLimit"] = _MantisAPI.VIDEO_ENCODER_bitrateLimit_get
    if _newclass:
        bitrateLimit = _swig_property(_MantisAPI.VIDEO_ENCODER_bitrateLimit_get, _MantisAPI.VIDEO_ENCODER_bitrateLimit_set)
    __swig_setmethods__["encoding"] = _MantisAPI.VIDEO_ENCODER_encoding_set
    __swig_getmethods__["encoding"] = _MantisAPI.VIDEO_ENCODER_encoding_get
    if _newclass:
        encoding = _swig_property(_MantisAPI.VIDEO_ENCODER_encoding_get, _MantisAPI.VIDEO_ENCODER_encoding_set)
    __swig_setmethods__["h264"] = _MantisAPI.VIDEO_ENCODER_h264_set
    __swig_getmethods__["h264"] = _MantisAPI.VIDEO_ENCODER_h264_get
    if _newclass:
        h264 = _swig_property(_MantisAPI.VIDEO_ENCODER_h264_get, _MantisAPI.VIDEO_ENCODER_h264_set)

    def __init__(self):
        this = _MantisAPI.new_VIDEO_ENCODER()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_VIDEO_ENCODER
    __del__ = lambda self: None
VIDEO_ENCODER_swigregister = _MantisAPI.VIDEO_ENCODER_swigregister
VIDEO_ENCODER_swigregister(VIDEO_ENCODER)

class CAMERA_PROFILE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAMERA_PROFILE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CAMERA_PROFILE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["videoSource"] = _MantisAPI.CAMERA_PROFILE_videoSource_set
    __swig_getmethods__["videoSource"] = _MantisAPI.CAMERA_PROFILE_videoSource_get
    if _newclass:
        videoSource = _swig_property(_MantisAPI.CAMERA_PROFILE_videoSource_get, _MantisAPI.CAMERA_PROFILE_videoSource_set)
    __swig_setmethods__["videoEncoder"] = _MantisAPI.CAMERA_PROFILE_videoEncoder_set
    __swig_getmethods__["videoEncoder"] = _MantisAPI.CAMERA_PROFILE_videoEncoder_get
    if _newclass:
        videoEncoder = _swig_property(_MantisAPI.CAMERA_PROFILE_videoEncoder_get, _MantisAPI.CAMERA_PROFILE_videoEncoder_set)
    __swig_setmethods__["streamUri"] = _MantisAPI.CAMERA_PROFILE_streamUri_set
    __swig_getmethods__["streamUri"] = _MantisAPI.CAMERA_PROFILE_streamUri_get
    if _newclass:
        streamUri = _swig_property(_MantisAPI.CAMERA_PROFILE_streamUri_get, _MantisAPI.CAMERA_PROFILE_streamUri_set)

    def __init__(self):
        this = _MantisAPI.new_CAMERA_PROFILE()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_CAMERA_PROFILE
    __del__ = lambda self: None
CAMERA_PROFILE_swigregister = _MantisAPI.CAMERA_PROFILE_swigregister
CAMERA_PROFILE_swigregister(CAMERA_PROFILE)

class ACOS_CLIP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ACOS_CLIP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ACOS_CLIP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cam"] = _MantisAPI.ACOS_CLIP_cam_set
    __swig_getmethods__["cam"] = _MantisAPI.ACOS_CLIP_cam_get
    if _newclass:
        cam = _swig_property(_MantisAPI.ACOS_CLIP_cam_get, _MantisAPI.ACOS_CLIP_cam_set)
    __swig_setmethods__["name"] = _MantisAPI.ACOS_CLIP_name_set
    __swig_getmethods__["name"] = _MantisAPI.ACOS_CLIP_name_get
    if _newclass:
        name = _swig_property(_MantisAPI.ACOS_CLIP_name_get, _MantisAPI.ACOS_CLIP_name_set)
    __swig_setmethods__["startTime"] = _MantisAPI.ACOS_CLIP_startTime_set
    __swig_getmethods__["startTime"] = _MantisAPI.ACOS_CLIP_startTime_get
    if _newclass:
        startTime = _swig_property(_MantisAPI.ACOS_CLIP_startTime_get, _MantisAPI.ACOS_CLIP_startTime_set)
    __swig_setmethods__["endTime"] = _MantisAPI.ACOS_CLIP_endTime_set
    __swig_getmethods__["endTime"] = _MantisAPI.ACOS_CLIP_endTime_get
    if _newclass:
        endTime = _swig_property(_MantisAPI.ACOS_CLIP_endTime_get, _MantisAPI.ACOS_CLIP_endTime_set)
    __swig_setmethods__["framerate"] = _MantisAPI.ACOS_CLIP_framerate_set
    __swig_getmethods__["framerate"] = _MantisAPI.ACOS_CLIP_framerate_get
    if _newclass:
        framerate = _swig_property(_MantisAPI.ACOS_CLIP_framerate_get, _MantisAPI.ACOS_CLIP_framerate_set)

    def __init__(self):
        this = _MantisAPI.new_ACOS_CLIP()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_ACOS_CLIP
    __del__ = lambda self: None
ACOS_CLIP_swigregister = _MantisAPI.ACOS_CLIP_swigregister
ACOS_CLIP_swigregister(ACOS_CLIP)

class CAMERA_BOOL_CALLBACK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAMERA_BOOL_CALLBACK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CAMERA_BOOL_CALLBACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _MantisAPI.CAMERA_BOOL_CALLBACK_f_set
    __swig_getmethods__["f"] = _MantisAPI.CAMERA_BOOL_CALLBACK_f_get
    if _newclass:
        f = _swig_property(_MantisAPI.CAMERA_BOOL_CALLBACK_f_get, _MantisAPI.CAMERA_BOOL_CALLBACK_f_set)
    __swig_setmethods__["data"] = _MantisAPI.CAMERA_BOOL_CALLBACK_data_set
    __swig_getmethods__["data"] = _MantisAPI.CAMERA_BOOL_CALLBACK_data_get
    if _newclass:
        data = _swig_property(_MantisAPI.CAMERA_BOOL_CALLBACK_data_get, _MantisAPI.CAMERA_BOOL_CALLBACK_data_set)

    def __init__(self):
        this = _MantisAPI.new_CAMERA_BOOL_CALLBACK()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_CAMERA_BOOL_CALLBACK
    __del__ = lambda self: None
CAMERA_BOOL_CALLBACK_swigregister = _MantisAPI.CAMERA_BOOL_CALLBACK_swigregister
CAMERA_BOOL_CALLBACK_swigregister(CAMERA_BOOL_CALLBACK)

class CAMERA_DOUBLE_CALLBACK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAMERA_DOUBLE_CALLBACK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CAMERA_DOUBLE_CALLBACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _MantisAPI.CAMERA_DOUBLE_CALLBACK_f_set
    __swig_getmethods__["f"] = _MantisAPI.CAMERA_DOUBLE_CALLBACK_f_get
    if _newclass:
        f = _swig_property(_MantisAPI.CAMERA_DOUBLE_CALLBACK_f_get, _MantisAPI.CAMERA_DOUBLE_CALLBACK_f_set)
    __swig_setmethods__["data"] = _MantisAPI.CAMERA_DOUBLE_CALLBACK_data_set
    __swig_getmethods__["data"] = _MantisAPI.CAMERA_DOUBLE_CALLBACK_data_get
    if _newclass:
        data = _swig_property(_MantisAPI.CAMERA_DOUBLE_CALLBACK_data_get, _MantisAPI.CAMERA_DOUBLE_CALLBACK_data_set)

    def __init__(self):
        this = _MantisAPI.new_CAMERA_DOUBLE_CALLBACK()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_CAMERA_DOUBLE_CALLBACK
    __del__ = lambda self: None
CAMERA_DOUBLE_CALLBACK_swigregister = _MantisAPI.CAMERA_DOUBLE_CALLBACK_swigregister
CAMERA_DOUBLE_CALLBACK_swigregister(CAMERA_DOUBLE_CALLBACK)

class CAMERA_UINT32_CALLBACK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAMERA_UINT32_CALLBACK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CAMERA_UINT32_CALLBACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _MantisAPI.CAMERA_UINT32_CALLBACK_f_set
    __swig_getmethods__["f"] = _MantisAPI.CAMERA_UINT32_CALLBACK_f_get
    if _newclass:
        f = _swig_property(_MantisAPI.CAMERA_UINT32_CALLBACK_f_get, _MantisAPI.CAMERA_UINT32_CALLBACK_f_set)
    __swig_setmethods__["data"] = _MantisAPI.CAMERA_UINT32_CALLBACK_data_set
    __swig_getmethods__["data"] = _MantisAPI.CAMERA_UINT32_CALLBACK_data_get
    if _newclass:
        data = _swig_property(_MantisAPI.CAMERA_UINT32_CALLBACK_data_get, _MantisAPI.CAMERA_UINT32_CALLBACK_data_set)

    def __init__(self):
        this = _MantisAPI.new_CAMERA_UINT32_CALLBACK()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_CAMERA_UINT32_CALLBACK
    __del__ = lambda self: None
CAMERA_UINT32_CALLBACK_swigregister = _MantisAPI.CAMERA_UINT32_CALLBACK_swigregister
CAMERA_UINT32_CALLBACK_swigregister(CAMERA_UINT32_CALLBACK)

class CAMERA_UINT16_CALLBACK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAMERA_UINT16_CALLBACK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CAMERA_UINT16_CALLBACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _MantisAPI.CAMERA_UINT16_CALLBACK_f_set
    __swig_getmethods__["f"] = _MantisAPI.CAMERA_UINT16_CALLBACK_f_get
    if _newclass:
        f = _swig_property(_MantisAPI.CAMERA_UINT16_CALLBACK_f_get, _MantisAPI.CAMERA_UINT16_CALLBACK_f_set)
    __swig_setmethods__["data"] = _MantisAPI.CAMERA_UINT16_CALLBACK_data_set
    __swig_getmethods__["data"] = _MantisAPI.CAMERA_UINT16_CALLBACK_data_get
    if _newclass:
        data = _swig_property(_MantisAPI.CAMERA_UINT16_CALLBACK_data_get, _MantisAPI.CAMERA_UINT16_CALLBACK_data_set)

    def __init__(self):
        this = _MantisAPI.new_CAMERA_UINT16_CALLBACK()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_CAMERA_UINT16_CALLBACK
    __del__ = lambda self: None
CAMERA_UINT16_CALLBACK_swigregister = _MantisAPI.CAMERA_UINT16_CALLBACK_swigregister
CAMERA_UINT16_CALLBACK_swigregister(CAMERA_UINT16_CALLBACK)

class CAMERA_CHAR10_CALLBACK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAMERA_CHAR10_CALLBACK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CAMERA_CHAR10_CALLBACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _MantisAPI.CAMERA_CHAR10_CALLBACK_f_set
    __swig_getmethods__["f"] = _MantisAPI.CAMERA_CHAR10_CALLBACK_f_get
    if _newclass:
        f = _swig_property(_MantisAPI.CAMERA_CHAR10_CALLBACK_f_get, _MantisAPI.CAMERA_CHAR10_CALLBACK_f_set)
    __swig_setmethods__["data"] = _MantisAPI.CAMERA_CHAR10_CALLBACK_data_set
    __swig_getmethods__["data"] = _MantisAPI.CAMERA_CHAR10_CALLBACK_data_get
    if _newclass:
        data = _swig_property(_MantisAPI.CAMERA_CHAR10_CALLBACK_data_get, _MantisAPI.CAMERA_CHAR10_CALLBACK_data_set)

    def __init__(self):
        this = _MantisAPI.new_CAMERA_CHAR10_CALLBACK()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_CAMERA_CHAR10_CALLBACK
    __del__ = lambda self: None
CAMERA_CHAR10_CALLBACK_swigregister = _MantisAPI.CAMERA_CHAR10_CALLBACK_swigregister
CAMERA_CHAR10_CALLBACK_swigregister(CAMERA_CHAR10_CALLBACK)

class ACOS_CLIP_CALLBACK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ACOS_CLIP_CALLBACK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ACOS_CLIP_CALLBACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _MantisAPI.ACOS_CLIP_CALLBACK_f_set
    __swig_getmethods__["f"] = _MantisAPI.ACOS_CLIP_CALLBACK_f_get
    if _newclass:
        f = _swig_property(_MantisAPI.ACOS_CLIP_CALLBACK_f_get, _MantisAPI.ACOS_CLIP_CALLBACK_f_set)
    __swig_setmethods__["data"] = _MantisAPI.ACOS_CLIP_CALLBACK_data_set
    __swig_getmethods__["data"] = _MantisAPI.ACOS_CLIP_CALLBACK_data_get
    if _newclass:
        data = _swig_property(_MantisAPI.ACOS_CLIP_CALLBACK_data_get, _MantisAPI.ACOS_CLIP_CALLBACK_data_set)

    def __init__(self):
        this = _MantisAPI.new_ACOS_CLIP_CALLBACK()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_ACOS_CLIP_CALLBACK
    __del__ = lambda self: None
ACOS_CLIP_CALLBACK_swigregister = _MantisAPI.ACOS_CLIP_CALLBACK_swigregister
ACOS_CLIP_CALLBACK_swigregister(ACOS_CLIP_CALLBACK)

class ACOS_IMAGE_REQUEST(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ACOS_IMAGE_REQUEST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ACOS_IMAGE_REQUEST, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ipstr"] = _MantisAPI.ACOS_IMAGE_REQUEST_ipstr_set
    __swig_getmethods__["ipstr"] = _MantisAPI.ACOS_IMAGE_REQUEST_ipstr_get
    if _newclass:
        ipstr = _swig_property(_MantisAPI.ACOS_IMAGE_REQUEST_ipstr_get, _MantisAPI.ACOS_IMAGE_REQUEST_ipstr_set)
    __swig_setmethods__["time"] = _MantisAPI.ACOS_IMAGE_REQUEST_time_set
    __swig_getmethods__["time"] = _MantisAPI.ACOS_IMAGE_REQUEST_time_get
    if _newclass:
        time = _swig_property(_MantisAPI.ACOS_IMAGE_REQUEST_time_get, _MantisAPI.ACOS_IMAGE_REQUEST_time_set)
    __swig_setmethods__["mcamId"] = _MantisAPI.ACOS_IMAGE_REQUEST_mcamId_set
    __swig_getmethods__["mcamId"] = _MantisAPI.ACOS_IMAGE_REQUEST_mcamId_get
    if _newclass:
        mcamId = _swig_property(_MantisAPI.ACOS_IMAGE_REQUEST_mcamId_get, _MantisAPI.ACOS_IMAGE_REQUEST_mcamId_set)
    __swig_setmethods__["tilingPolicy"] = _MantisAPI.ACOS_IMAGE_REQUEST_tilingPolicy_set
    __swig_getmethods__["tilingPolicy"] = _MantisAPI.ACOS_IMAGE_REQUEST_tilingPolicy_get
    if _newclass:
        tilingPolicy = _swig_property(_MantisAPI.ACOS_IMAGE_REQUEST_tilingPolicy_get, _MantisAPI.ACOS_IMAGE_REQUEST_tilingPolicy_set)
    __swig_setmethods__["tile"] = _MantisAPI.ACOS_IMAGE_REQUEST_tile_set
    __swig_getmethods__["tile"] = _MantisAPI.ACOS_IMAGE_REQUEST_tile_get
    if _newclass:
        tile = _swig_property(_MantisAPI.ACOS_IMAGE_REQUEST_tile_get, _MantisAPI.ACOS_IMAGE_REQUEST_tile_set)

    def __init__(self):
        this = _MantisAPI.new_ACOS_IMAGE_REQUEST()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_ACOS_IMAGE_REQUEST
    __del__ = lambda self: None
ACOS_IMAGE_REQUEST_swigregister = _MantisAPI.ACOS_IMAGE_REQUEST_swigregister
ACOS_IMAGE_REQUEST_swigregister(ACOS_IMAGE_REQUEST)

class NEW_CAMERA_CALLBACK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NEW_CAMERA_CALLBACK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NEW_CAMERA_CALLBACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _MantisAPI.NEW_CAMERA_CALLBACK_f_set
    __swig_getmethods__["f"] = _MantisAPI.NEW_CAMERA_CALLBACK_f_get
    if _newclass:
        f = _swig_property(_MantisAPI.NEW_CAMERA_CALLBACK_f_get, _MantisAPI.NEW_CAMERA_CALLBACK_f_set)
    __swig_setmethods__["data"] = _MantisAPI.NEW_CAMERA_CALLBACK_data_set
    __swig_getmethods__["data"] = _MantisAPI.NEW_CAMERA_CALLBACK_data_get
    if _newclass:
        data = _swig_property(_MantisAPI.NEW_CAMERA_CALLBACK_data_get, _MantisAPI.NEW_CAMERA_CALLBACK_data_set)

    def __init__(self):
        this = _MantisAPI.new_NEW_CAMERA_CALLBACK()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_NEW_CAMERA_CALLBACK
    __del__ = lambda self: None
NEW_CAMERA_CALLBACK_swigregister = _MantisAPI.NEW_CAMERA_CALLBACK_swigregister
NEW_CAMERA_CALLBACK_swigregister(NEW_CAMERA_CALLBACK)

class CAMERA_CALLBACKS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAMERA_CALLBACKS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CAMERA_CALLBACKS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["videoEncoderWidth"] = _MantisAPI.CAMERA_CALLBACKS_videoEncoderWidth_set
    __swig_getmethods__["videoEncoderWidth"] = _MantisAPI.CAMERA_CALLBACKS_videoEncoderWidth_get
    if _newclass:
        videoEncoderWidth = _swig_property(_MantisAPI.CAMERA_CALLBACKS_videoEncoderWidth_get, _MantisAPI.CAMERA_CALLBACKS_videoEncoderWidth_set)
    __swig_setmethods__["videoEncoderHeight"] = _MantisAPI.CAMERA_CALLBACKS_videoEncoderHeight_set
    __swig_getmethods__["videoEncoderHeight"] = _MantisAPI.CAMERA_CALLBACKS_videoEncoderHeight_get
    if _newclass:
        videoEncoderHeight = _swig_property(_MantisAPI.CAMERA_CALLBACKS_videoEncoderHeight_get, _MantisAPI.CAMERA_CALLBACKS_videoEncoderHeight_set)
    __swig_setmethods__["videoEncoderQuality"] = _MantisAPI.CAMERA_CALLBACKS_videoEncoderQuality_set
    __swig_getmethods__["videoEncoderQuality"] = _MantisAPI.CAMERA_CALLBACKS_videoEncoderQuality_get
    if _newclass:
        videoEncoderQuality = _swig_property(_MantisAPI.CAMERA_CALLBACKS_videoEncoderQuality_get, _MantisAPI.CAMERA_CALLBACKS_videoEncoderQuality_set)
    __swig_setmethods__["videoEncoderSessionTimeout"] = _MantisAPI.CAMERA_CALLBACKS_videoEncoderSessionTimeout_set
    __swig_getmethods__["videoEncoderSessionTimeout"] = _MantisAPI.CAMERA_CALLBACKS_videoEncoderSessionTimeout_get
    if _newclass:
        videoEncoderSessionTimeout = _swig_property(_MantisAPI.CAMERA_CALLBACKS_videoEncoderSessionTimeout_get, _MantisAPI.CAMERA_CALLBACKS_videoEncoderSessionTimeout_set)
    __swig_setmethods__["videoEncoderFramerate"] = _MantisAPI.CAMERA_CALLBACKS_videoEncoderFramerate_set
    __swig_getmethods__["videoEncoderFramerate"] = _MantisAPI.CAMERA_CALLBACKS_videoEncoderFramerate_get
    if _newclass:
        videoEncoderFramerate = _swig_property(_MantisAPI.CAMERA_CALLBACKS_videoEncoderFramerate_get, _MantisAPI.CAMERA_CALLBACKS_videoEncoderFramerate_set)
    __swig_setmethods__["videoEncoderEncodingInterval"] = _MantisAPI.CAMERA_CALLBACKS_videoEncoderEncodingInterval_set
    __swig_getmethods__["videoEncoderEncodingInterval"] = _MantisAPI.CAMERA_CALLBACKS_videoEncoderEncodingInterval_get
    if _newclass:
        videoEncoderEncodingInterval = _swig_property(_MantisAPI.CAMERA_CALLBACKS_videoEncoderEncodingInterval_get, _MantisAPI.CAMERA_CALLBACKS_videoEncoderEncodingInterval_set)
    __swig_setmethods__["videoEncoderBitrateLimit"] = _MantisAPI.CAMERA_CALLBACKS_videoEncoderBitrateLimit_set
    __swig_getmethods__["videoEncoderBitrateLimit"] = _MantisAPI.CAMERA_CALLBACKS_videoEncoderBitrateLimit_get
    if _newclass:
        videoEncoderBitrateLimit = _swig_property(_MantisAPI.CAMERA_CALLBACKS_videoEncoderBitrateLimit_get, _MantisAPI.CAMERA_CALLBACKS_videoEncoderBitrateLimit_set)
    __swig_setmethods__["videoEncoderEncoding"] = _MantisAPI.CAMERA_CALLBACKS_videoEncoderEncoding_set
    __swig_getmethods__["videoEncoderEncoding"] = _MantisAPI.CAMERA_CALLBACKS_videoEncoderEncoding_get
    if _newclass:
        videoEncoderEncoding = _swig_property(_MantisAPI.CAMERA_CALLBACKS_videoEncoderEncoding_get, _MantisAPI.CAMERA_CALLBACKS_videoEncoderEncoding_set)
    __swig_setmethods__["videoSourceWidth"] = _MantisAPI.CAMERA_CALLBACKS_videoSourceWidth_set
    __swig_getmethods__["videoSourceWidth"] = _MantisAPI.CAMERA_CALLBACKS_videoSourceWidth_get
    if _newclass:
        videoSourceWidth = _swig_property(_MantisAPI.CAMERA_CALLBACKS_videoSourceWidth_get, _MantisAPI.CAMERA_CALLBACKS_videoSourceWidth_set)
    __swig_setmethods__["videoSourceHeight"] = _MantisAPI.CAMERA_CALLBACKS_videoSourceHeight_set
    __swig_getmethods__["videoSourceHeight"] = _MantisAPI.CAMERA_CALLBACKS_videoSourceHeight_get
    if _newclass:
        videoSourceHeight = _swig_property(_MantisAPI.CAMERA_CALLBACKS_videoSourceHeight_get, _MantisAPI.CAMERA_CALLBACKS_videoSourceHeight_set)

    def __init__(self):
        this = _MantisAPI.new_CAMERA_CALLBACKS()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_CAMERA_CALLBACKS
    __del__ = lambda self: None
CAMERA_CALLBACKS_swigregister = _MantisAPI.CAMERA_CALLBACKS_swigregister
CAMERA_CALLBACKS_swigregister(CAMERA_CALLBACKS)

class MICRO_CAMERA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MICRO_CAMERA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MICRO_CAMERA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mcamID"] = _MantisAPI.MICRO_CAMERA_mcamID_set
    __swig_getmethods__["mcamID"] = _MantisAPI.MICRO_CAMERA_mcamID_get
    if _newclass:
        mcamID = _swig_property(_MantisAPI.MICRO_CAMERA_mcamID_get, _MantisAPI.MICRO_CAMERA_mcamID_set)
    __swig_setmethods__["tegraip"] = _MantisAPI.MICRO_CAMERA_tegraip_set
    __swig_getmethods__["tegraip"] = _MantisAPI.MICRO_CAMERA_tegraip_get
    if _newclass:
        tegraip = _swig_property(_MantisAPI.MICRO_CAMERA_tegraip_get, _MantisAPI.MICRO_CAMERA_tegraip_set)
    __swig_setmethods__["theta"] = _MantisAPI.MICRO_CAMERA_theta_set
    __swig_getmethods__["theta"] = _MantisAPI.MICRO_CAMERA_theta_get
    if _newclass:
        theta = _swig_property(_MantisAPI.MICRO_CAMERA_theta_get, _MantisAPI.MICRO_CAMERA_theta_set)
    __swig_setmethods__["phi"] = _MantisAPI.MICRO_CAMERA_phi_set
    __swig_getmethods__["phi"] = _MantisAPI.MICRO_CAMERA_phi_get
    if _newclass:
        phi = _swig_property(_MantisAPI.MICRO_CAMERA_phi_get, _MantisAPI.MICRO_CAMERA_phi_set)

    def __init__(self):
        this = _MantisAPI.new_MICRO_CAMERA()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_MICRO_CAMERA
    __del__ = lambda self: None
MICRO_CAMERA_swigregister = _MantisAPI.MICRO_CAMERA_swigregister
MICRO_CAMERA_swigregister(MICRO_CAMERA)

class FRAME_POSITION(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FRAME_POSITION, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FRAME_POSITION, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_x"] = _MantisAPI.FRAME_POSITION_m_x_set
    __swig_getmethods__["m_x"] = _MantisAPI.FRAME_POSITION_m_x_get
    if _newclass:
        m_x = _swig_property(_MantisAPI.FRAME_POSITION_m_x_get, _MantisAPI.FRAME_POSITION_m_x_set)
    __swig_setmethods__["m_y"] = _MantisAPI.FRAME_POSITION_m_y_set
    __swig_getmethods__["m_y"] = _MantisAPI.FRAME_POSITION_m_y_get
    if _newclass:
        m_y = _swig_property(_MantisAPI.FRAME_POSITION_m_y_get, _MantisAPI.FRAME_POSITION_m_y_set)
    __swig_setmethods__["m_z"] = _MantisAPI.FRAME_POSITION_m_z_set
    __swig_getmethods__["m_z"] = _MantisAPI.FRAME_POSITION_m_z_get
    if _newclass:
        m_z = _swig_property(_MantisAPI.FRAME_POSITION_m_z_get, _MantisAPI.FRAME_POSITION_m_z_set)
    __swig_setmethods__["m_theta"] = _MantisAPI.FRAME_POSITION_m_theta_set
    __swig_getmethods__["m_theta"] = _MantisAPI.FRAME_POSITION_m_theta_get
    if _newclass:
        m_theta = _swig_property(_MantisAPI.FRAME_POSITION_m_theta_get, _MantisAPI.FRAME_POSITION_m_theta_set)
    __swig_setmethods__["m_phi"] = _MantisAPI.FRAME_POSITION_m_phi_set
    __swig_getmethods__["m_phi"] = _MantisAPI.FRAME_POSITION_m_phi_get
    if _newclass:
        m_phi = _swig_property(_MantisAPI.FRAME_POSITION_m_phi_get, _MantisAPI.FRAME_POSITION_m_phi_set)
    __swig_setmethods__["m_rho"] = _MantisAPI.FRAME_POSITION_m_rho_set
    __swig_getmethods__["m_rho"] = _MantisAPI.FRAME_POSITION_m_rho_get
    if _newclass:
        m_rho = _swig_property(_MantisAPI.FRAME_POSITION_m_rho_get, _MantisAPI.FRAME_POSITION_m_rho_set)

    def __init__(self):
        this = _MantisAPI.new_FRAME_POSITION()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_FRAME_POSITION
    __del__ = lambda self: None
FRAME_POSITION_swigregister = _MantisAPI.FRAME_POSITION_swigregister
FRAME_POSITION_swigregister(FRAME_POSITION)

class FRAME_FOV(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FRAME_FOV, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FRAME_FOV, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_minTheta"] = _MantisAPI.FRAME_FOV_m_minTheta_set
    __swig_getmethods__["m_minTheta"] = _MantisAPI.FRAME_FOV_m_minTheta_get
    if _newclass:
        m_minTheta = _swig_property(_MantisAPI.FRAME_FOV_m_minTheta_get, _MantisAPI.FRAME_FOV_m_minTheta_set)
    __swig_setmethods__["m_maxTheta"] = _MantisAPI.FRAME_FOV_m_maxTheta_set
    __swig_getmethods__["m_maxTheta"] = _MantisAPI.FRAME_FOV_m_maxTheta_get
    if _newclass:
        m_maxTheta = _swig_property(_MantisAPI.FRAME_FOV_m_maxTheta_get, _MantisAPI.FRAME_FOV_m_maxTheta_set)
    __swig_setmethods__["m_minPhi"] = _MantisAPI.FRAME_FOV_m_minPhi_set
    __swig_getmethods__["m_minPhi"] = _MantisAPI.FRAME_FOV_m_minPhi_get
    if _newclass:
        m_minPhi = _swig_property(_MantisAPI.FRAME_FOV_m_minPhi_get, _MantisAPI.FRAME_FOV_m_minPhi_set)
    __swig_setmethods__["m_maxPhi"] = _MantisAPI.FRAME_FOV_m_maxPhi_set
    __swig_getmethods__["m_maxPhi"] = _MantisAPI.FRAME_FOV_m_maxPhi_get
    if _newclass:
        m_maxPhi = _swig_property(_MantisAPI.FRAME_FOV_m_maxPhi_get, _MantisAPI.FRAME_FOV_m_maxPhi_set)
    __swig_setmethods__["m_iFOV"] = _MantisAPI.FRAME_FOV_m_iFOV_set
    __swig_getmethods__["m_iFOV"] = _MantisAPI.FRAME_FOV_m_iFOV_get
    if _newclass:
        m_iFOV = _swig_property(_MantisAPI.FRAME_FOV_m_iFOV_get, _MantisAPI.FRAME_FOV_m_iFOV_set)

    def __init__(self):
        this = _MantisAPI.new_FRAME_FOV()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_FRAME_FOV
    __del__ = lambda self: None
FRAME_FOV_swigregister = _MantisAPI.FRAME_FOV_swigregister
FRAME_FOV_swigregister(FRAME_FOV)

class FRAME_SENSOR_ROI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FRAME_SENSOR_ROI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FRAME_SENSOR_ROI, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_offsetX"] = _MantisAPI.FRAME_SENSOR_ROI_m_offsetX_set
    __swig_getmethods__["m_offsetX"] = _MantisAPI.FRAME_SENSOR_ROI_m_offsetX_get
    if _newclass:
        m_offsetX = _swig_property(_MantisAPI.FRAME_SENSOR_ROI_m_offsetX_get, _MantisAPI.FRAME_SENSOR_ROI_m_offsetX_set)
    __swig_setmethods__["m_offsetY"] = _MantisAPI.FRAME_SENSOR_ROI_m_offsetY_set
    __swig_getmethods__["m_offsetY"] = _MantisAPI.FRAME_SENSOR_ROI_m_offsetY_get
    if _newclass:
        m_offsetY = _swig_property(_MantisAPI.FRAME_SENSOR_ROI_m_offsetY_get, _MantisAPI.FRAME_SENSOR_ROI_m_offsetY_set)
    __swig_setmethods__["m_roiWidth"] = _MantisAPI.FRAME_SENSOR_ROI_m_roiWidth_set
    __swig_getmethods__["m_roiWidth"] = _MantisAPI.FRAME_SENSOR_ROI_m_roiWidth_get
    if _newclass:
        m_roiWidth = _swig_property(_MantisAPI.FRAME_SENSOR_ROI_m_roiWidth_get, _MantisAPI.FRAME_SENSOR_ROI_m_roiWidth_set)
    __swig_setmethods__["m_roiHeight"] = _MantisAPI.FRAME_SENSOR_ROI_m_roiHeight_set
    __swig_getmethods__["m_roiHeight"] = _MantisAPI.FRAME_SENSOR_ROI_m_roiHeight_get
    if _newclass:
        m_roiHeight = _swig_property(_MantisAPI.FRAME_SENSOR_ROI_m_roiHeight_get, _MantisAPI.FRAME_SENSOR_ROI_m_roiHeight_set)

    def __init__(self):
        this = _MantisAPI.new_FRAME_SENSOR_ROI()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_FRAME_SENSOR_ROI
    __del__ = lambda self: None
FRAME_SENSOR_ROI_swigregister = _MantisAPI.FRAME_SENSOR_ROI_swigregister
FRAME_SENSOR_ROI_swigregister(FRAME_SENSOR_ROI)

class FRAME_METADATA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FRAME_METADATA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FRAME_METADATA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_id"] = _MantisAPI.FRAME_METADATA_m_id_set
    __swig_getmethods__["m_id"] = _MantisAPI.FRAME_METADATA_m_id_get
    if _newclass:
        m_id = _swig_property(_MantisAPI.FRAME_METADATA_m_id_get, _MantisAPI.FRAME_METADATA_m_id_set)
    __swig_setmethods__["m_type"] = _MantisAPI.FRAME_METADATA_m_type_set
    __swig_getmethods__["m_type"] = _MantisAPI.FRAME_METADATA_m_type_get
    if _newclass:
        m_type = _swig_property(_MantisAPI.FRAME_METADATA_m_type_get, _MantisAPI.FRAME_METADATA_m_type_set)
    __swig_setmethods__["m_size"] = _MantisAPI.FRAME_METADATA_m_size_set
    __swig_getmethods__["m_size"] = _MantisAPI.FRAME_METADATA_m_size_get
    if _newclass:
        m_size = _swig_property(_MantisAPI.FRAME_METADATA_m_size_get, _MantisAPI.FRAME_METADATA_m_size_set)
    __swig_setmethods__["m_metaSize"] = _MantisAPI.FRAME_METADATA_m_metaSize_set
    __swig_getmethods__["m_metaSize"] = _MantisAPI.FRAME_METADATA_m_metaSize_get
    if _newclass:
        m_metaSize = _swig_property(_MantisAPI.FRAME_METADATA_m_metaSize_get, _MantisAPI.FRAME_METADATA_m_metaSize_set)
    __swig_setmethods__["m_offset"] = _MantisAPI.FRAME_METADATA_m_offset_set
    __swig_getmethods__["m_offset"] = _MantisAPI.FRAME_METADATA_m_offset_get
    if _newclass:
        m_offset = _swig_property(_MantisAPI.FRAME_METADATA_m_offset_get, _MantisAPI.FRAME_METADATA_m_offset_set)
    __swig_setmethods__["m_timestamp"] = _MantisAPI.FRAME_METADATA_m_timestamp_set
    __swig_getmethods__["m_timestamp"] = _MantisAPI.FRAME_METADATA_m_timestamp_get
    if _newclass:
        m_timestamp = _swig_property(_MantisAPI.FRAME_METADATA_m_timestamp_get, _MantisAPI.FRAME_METADATA_m_timestamp_set)
    __swig_setmethods__["m_mode"] = _MantisAPI.FRAME_METADATA_m_mode_set
    __swig_getmethods__["m_mode"] = _MantisAPI.FRAME_METADATA_m_mode_get
    if _newclass:
        m_mode = _swig_property(_MantisAPI.FRAME_METADATA_m_mode_get, _MantisAPI.FRAME_METADATA_m_mode_set)
    __swig_setmethods__["m_width"] = _MantisAPI.FRAME_METADATA_m_width_set
    __swig_getmethods__["m_width"] = _MantisAPI.FRAME_METADATA_m_width_get
    if _newclass:
        m_width = _swig_property(_MantisAPI.FRAME_METADATA_m_width_get, _MantisAPI.FRAME_METADATA_m_width_set)
    __swig_setmethods__["m_height"] = _MantisAPI.FRAME_METADATA_m_height_set
    __swig_getmethods__["m_height"] = _MantisAPI.FRAME_METADATA_m_height_get
    if _newclass:
        m_height = _swig_property(_MantisAPI.FRAME_METADATA_m_height_get, _MantisAPI.FRAME_METADATA_m_height_set)
    __swig_setmethods__["m_bpp"] = _MantisAPI.FRAME_METADATA_m_bpp_set
    __swig_getmethods__["m_bpp"] = _MantisAPI.FRAME_METADATA_m_bpp_get
    if _newclass:
        m_bpp = _swig_property(_MantisAPI.FRAME_METADATA_m_bpp_get, _MantisAPI.FRAME_METADATA_m_bpp_set)
    __swig_setmethods__["m_camId"] = _MantisAPI.FRAME_METADATA_m_camId_set
    __swig_getmethods__["m_camId"] = _MantisAPI.FRAME_METADATA_m_camId_get
    if _newclass:
        m_camId = _swig_property(_MantisAPI.FRAME_METADATA_m_camId_get, _MantisAPI.FRAME_METADATA_m_camId_set)
    __swig_setmethods__["m_tilingPolicy"] = _MantisAPI.FRAME_METADATA_m_tilingPolicy_set
    __swig_getmethods__["m_tilingPolicy"] = _MantisAPI.FRAME_METADATA_m_tilingPolicy_get
    if _newclass:
        m_tilingPolicy = _swig_property(_MantisAPI.FRAME_METADATA_m_tilingPolicy_get, _MantisAPI.FRAME_METADATA_m_tilingPolicy_set)
    __swig_setmethods__["m_tile"] = _MantisAPI.FRAME_METADATA_m_tile_set
    __swig_getmethods__["m_tile"] = _MantisAPI.FRAME_METADATA_m_tile_get
    if _newclass:
        m_tile = _swig_property(_MantisAPI.FRAME_METADATA_m_tile_get, _MantisAPI.FRAME_METADATA_m_tile_set)
    __swig_setmethods__["m_exposure"] = _MantisAPI.FRAME_METADATA_m_exposure_set
    __swig_getmethods__["m_exposure"] = _MantisAPI.FRAME_METADATA_m_exposure_get
    if _newclass:
        m_exposure = _swig_property(_MantisAPI.FRAME_METADATA_m_exposure_get, _MantisAPI.FRAME_METADATA_m_exposure_set)
    __swig_setmethods__["m_gainR"] = _MantisAPI.FRAME_METADATA_m_gainR_set
    __swig_getmethods__["m_gainR"] = _MantisAPI.FRAME_METADATA_m_gainR_get
    if _newclass:
        m_gainR = _swig_property(_MantisAPI.FRAME_METADATA_m_gainR_get, _MantisAPI.FRAME_METADATA_m_gainR_set)
    __swig_setmethods__["m_gainB"] = _MantisAPI.FRAME_METADATA_m_gainB_set
    __swig_getmethods__["m_gainB"] = _MantisAPI.FRAME_METADATA_m_gainB_get
    if _newclass:
        m_gainB = _swig_property(_MantisAPI.FRAME_METADATA_m_gainB_get, _MantisAPI.FRAME_METADATA_m_gainB_set)
    __swig_setmethods__["m_position"] = _MantisAPI.FRAME_METADATA_m_position_set
    __swig_getmethods__["m_position"] = _MantisAPI.FRAME_METADATA_m_position_get
    if _newclass:
        m_position = _swig_property(_MantisAPI.FRAME_METADATA_m_position_get, _MantisAPI.FRAME_METADATA_m_position_set)
    __swig_setmethods__["m_fov"] = _MantisAPI.FRAME_METADATA_m_fov_set
    __swig_getmethods__["m_fov"] = _MantisAPI.FRAME_METADATA_m_fov_get
    if _newclass:
        m_fov = _swig_property(_MantisAPI.FRAME_METADATA_m_fov_get, _MantisAPI.FRAME_METADATA_m_fov_set)
    __swig_setmethods__["m_aperture"] = _MantisAPI.FRAME_METADATA_m_aperture_set
    __swig_getmethods__["m_aperture"] = _MantisAPI.FRAME_METADATA_m_aperture_get
    if _newclass:
        m_aperture = _swig_property(_MantisAPI.FRAME_METADATA_m_aperture_get, _MantisAPI.FRAME_METADATA_m_aperture_set)
    __swig_setmethods__["m_focusPos"] = _MantisAPI.FRAME_METADATA_m_focusPos_set
    __swig_getmethods__["m_focusPos"] = _MantisAPI.FRAME_METADATA_m_focusPos_get
    if _newclass:
        m_focusPos = _swig_property(_MantisAPI.FRAME_METADATA_m_focusPos_get, _MantisAPI.FRAME_METADATA_m_focusPos_set)
    __swig_setmethods__["m_framerate"] = _MantisAPI.FRAME_METADATA_m_framerate_set
    __swig_getmethods__["m_framerate"] = _MantisAPI.FRAME_METADATA_m_framerate_get
    if _newclass:
        m_framerate = _swig_property(_MantisAPI.FRAME_METADATA_m_framerate_get, _MantisAPI.FRAME_METADATA_m_framerate_set)
    __swig_setmethods__["m_gain"] = _MantisAPI.FRAME_METADATA_m_gain_set
    __swig_getmethods__["m_gain"] = _MantisAPI.FRAME_METADATA_m_gain_get
    if _newclass:
        m_gain = _swig_property(_MantisAPI.FRAME_METADATA_m_gain_get, _MantisAPI.FRAME_METADATA_m_gain_set)
    __swig_setmethods__["m_saturation"] = _MantisAPI.FRAME_METADATA_m_saturation_set
    __swig_getmethods__["m_saturation"] = _MantisAPI.FRAME_METADATA_m_saturation_get
    if _newclass:
        m_saturation = _swig_property(_MantisAPI.FRAME_METADATA_m_saturation_get, _MantisAPI.FRAME_METADATA_m_saturation_set)
    __swig_setmethods__["m_shutter"] = _MantisAPI.FRAME_METADATA_m_shutter_set
    __swig_getmethods__["m_shutter"] = _MantisAPI.FRAME_METADATA_m_shutter_get
    if _newclass:
        m_shutter = _swig_property(_MantisAPI.FRAME_METADATA_m_shutter_get, _MantisAPI.FRAME_METADATA_m_shutter_set)
    __swig_setmethods__["m_sensorType"] = _MantisAPI.FRAME_METADATA_m_sensorType_set
    __swig_getmethods__["m_sensorType"] = _MantisAPI.FRAME_METADATA_m_sensorType_get
    if _newclass:
        m_sensorType = _swig_property(_MantisAPI.FRAME_METADATA_m_sensorType_get, _MantisAPI.FRAME_METADATA_m_sensorType_set)
    __swig_setmethods__["m_sensorRoi"] = _MantisAPI.FRAME_METADATA_m_sensorRoi_set
    __swig_getmethods__["m_sensorRoi"] = _MantisAPI.FRAME_METADATA_m_sensorRoi_get
    if _newclass:
        m_sensorRoi = _swig_property(_MantisAPI.FRAME_METADATA_m_sensorRoi_get, _MantisAPI.FRAME_METADATA_m_sensorRoi_set)

    def __init__(self):
        this = _MantisAPI.new_FRAME_METADATA()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_FRAME_METADATA
    __del__ = lambda self: None
FRAME_METADATA_swigregister = _MantisAPI.FRAME_METADATA_swigregister
FRAME_METADATA_swigregister(FRAME_METADATA)

class FRAME(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FRAME, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FRAME, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_metadata"] = _MantisAPI.FRAME_m_metadata_set
    __swig_getmethods__["m_metadata"] = _MantisAPI.FRAME_m_metadata_get
    if _newclass:
        m_metadata = _swig_property(_MantisAPI.FRAME_m_metadata_get, _MantisAPI.FRAME_m_metadata_set)
    __swig_setmethods__["m_image"] = _MantisAPI.FRAME_m_image_set
    __swig_getmethods__["m_image"] = _MantisAPI.FRAME_m_image_get
    if _newclass:
        m_image = _swig_property(_MantisAPI.FRAME_m_image_get, _MantisAPI.FRAME_m_image_set)

    def __init__(self):
        this = _MantisAPI.new_FRAME()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_FRAME
    __del__ = lambda self: None
FRAME_swigregister = _MantisAPI.FRAME_swigregister
FRAME_swigregister(FRAME)

class MICRO_CAMERA_BOOL_CALLBACK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MICRO_CAMERA_BOOL_CALLBACK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MICRO_CAMERA_BOOL_CALLBACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _MantisAPI.MICRO_CAMERA_BOOL_CALLBACK_f_set
    __swig_getmethods__["f"] = _MantisAPI.MICRO_CAMERA_BOOL_CALLBACK_f_get
    if _newclass:
        f = _swig_property(_MantisAPI.MICRO_CAMERA_BOOL_CALLBACK_f_get, _MantisAPI.MICRO_CAMERA_BOOL_CALLBACK_f_set)
    __swig_setmethods__["data"] = _MantisAPI.MICRO_CAMERA_BOOL_CALLBACK_data_set
    __swig_getmethods__["data"] = _MantisAPI.MICRO_CAMERA_BOOL_CALLBACK_data_get
    if _newclass:
        data = _swig_property(_MantisAPI.MICRO_CAMERA_BOOL_CALLBACK_data_get, _MantisAPI.MICRO_CAMERA_BOOL_CALLBACK_data_set)

    def __init__(self):
        this = _MantisAPI.new_MICRO_CAMERA_BOOL_CALLBACK()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_MICRO_CAMERA_BOOL_CALLBACK
    __del__ = lambda self: None
MICRO_CAMERA_BOOL_CALLBACK_swigregister = _MantisAPI.MICRO_CAMERA_BOOL_CALLBACK_swigregister
MICRO_CAMERA_BOOL_CALLBACK_swigregister(MICRO_CAMERA_BOOL_CALLBACK)

class MICRO_CAMERA_UINT64_CALLBACK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MICRO_CAMERA_UINT64_CALLBACK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MICRO_CAMERA_UINT64_CALLBACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _MantisAPI.MICRO_CAMERA_UINT64_CALLBACK_f_set
    __swig_getmethods__["f"] = _MantisAPI.MICRO_CAMERA_UINT64_CALLBACK_f_get
    if _newclass:
        f = _swig_property(_MantisAPI.MICRO_CAMERA_UINT64_CALLBACK_f_get, _MantisAPI.MICRO_CAMERA_UINT64_CALLBACK_f_set)
    __swig_setmethods__["data"] = _MantisAPI.MICRO_CAMERA_UINT64_CALLBACK_data_set
    __swig_getmethods__["data"] = _MantisAPI.MICRO_CAMERA_UINT64_CALLBACK_data_get
    if _newclass:
        data = _swig_property(_MantisAPI.MICRO_CAMERA_UINT64_CALLBACK_data_get, _MantisAPI.MICRO_CAMERA_UINT64_CALLBACK_data_set)

    def __init__(self):
        this = _MantisAPI.new_MICRO_CAMERA_UINT64_CALLBACK()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_MICRO_CAMERA_UINT64_CALLBACK
    __del__ = lambda self: None
MICRO_CAMERA_UINT64_CALLBACK_swigregister = _MantisAPI.MICRO_CAMERA_UINT64_CALLBACK_swigregister
MICRO_CAMERA_UINT64_CALLBACK_swigregister(MICRO_CAMERA_UINT64_CALLBACK)

class MICRO_CAMERA_DOUBLE_CALLBACK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MICRO_CAMERA_DOUBLE_CALLBACK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MICRO_CAMERA_DOUBLE_CALLBACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _MantisAPI.MICRO_CAMERA_DOUBLE_CALLBACK_f_set
    __swig_getmethods__["f"] = _MantisAPI.MICRO_CAMERA_DOUBLE_CALLBACK_f_get
    if _newclass:
        f = _swig_property(_MantisAPI.MICRO_CAMERA_DOUBLE_CALLBACK_f_get, _MantisAPI.MICRO_CAMERA_DOUBLE_CALLBACK_f_set)
    __swig_setmethods__["data"] = _MantisAPI.MICRO_CAMERA_DOUBLE_CALLBACK_data_set
    __swig_getmethods__["data"] = _MantisAPI.MICRO_CAMERA_DOUBLE_CALLBACK_data_get
    if _newclass:
        data = _swig_property(_MantisAPI.MICRO_CAMERA_DOUBLE_CALLBACK_data_get, _MantisAPI.MICRO_CAMERA_DOUBLE_CALLBACK_data_set)

    def __init__(self):
        this = _MantisAPI.new_MICRO_CAMERA_DOUBLE_CALLBACK()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_MICRO_CAMERA_DOUBLE_CALLBACK
    __del__ = lambda self: None
MICRO_CAMERA_DOUBLE_CALLBACK_swigregister = _MantisAPI.MICRO_CAMERA_DOUBLE_CALLBACK_swigregister
MICRO_CAMERA_DOUBLE_CALLBACK_swigregister(MICRO_CAMERA_DOUBLE_CALLBACK)

class MICRO_CAMERA_PAIR_DOUBLE_CALLBACK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MICRO_CAMERA_PAIR_DOUBLE_CALLBACK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MICRO_CAMERA_PAIR_DOUBLE_CALLBACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _MantisAPI.MICRO_CAMERA_PAIR_DOUBLE_CALLBACK_f_set
    __swig_getmethods__["f"] = _MantisAPI.MICRO_CAMERA_PAIR_DOUBLE_CALLBACK_f_get
    if _newclass:
        f = _swig_property(_MantisAPI.MICRO_CAMERA_PAIR_DOUBLE_CALLBACK_f_get, _MantisAPI.MICRO_CAMERA_PAIR_DOUBLE_CALLBACK_f_set)
    __swig_setmethods__["data"] = _MantisAPI.MICRO_CAMERA_PAIR_DOUBLE_CALLBACK_data_set
    __swig_getmethods__["data"] = _MantisAPI.MICRO_CAMERA_PAIR_DOUBLE_CALLBACK_data_get
    if _newclass:
        data = _swig_property(_MantisAPI.MICRO_CAMERA_PAIR_DOUBLE_CALLBACK_data_get, _MantisAPI.MICRO_CAMERA_PAIR_DOUBLE_CALLBACK_data_set)

    def __init__(self):
        this = _MantisAPI.new_MICRO_CAMERA_PAIR_DOUBLE_CALLBACK()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_MICRO_CAMERA_PAIR_DOUBLE_CALLBACK
    __del__ = lambda self: None
MICRO_CAMERA_PAIR_DOUBLE_CALLBACK_swigregister = _MantisAPI.MICRO_CAMERA_PAIR_DOUBLE_CALLBACK_swigregister
MICRO_CAMERA_PAIR_DOUBLE_CALLBACK_swigregister(MICRO_CAMERA_PAIR_DOUBLE_CALLBACK)

class MICRO_CAMERA_WHITEBALANCE_CALLBACK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MICRO_CAMERA_WHITEBALANCE_CALLBACK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MICRO_CAMERA_WHITEBALANCE_CALLBACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _MantisAPI.MICRO_CAMERA_WHITEBALANCE_CALLBACK_f_set
    __swig_getmethods__["f"] = _MantisAPI.MICRO_CAMERA_WHITEBALANCE_CALLBACK_f_get
    if _newclass:
        f = _swig_property(_MantisAPI.MICRO_CAMERA_WHITEBALANCE_CALLBACK_f_get, _MantisAPI.MICRO_CAMERA_WHITEBALANCE_CALLBACK_f_set)
    __swig_setmethods__["data"] = _MantisAPI.MICRO_CAMERA_WHITEBALANCE_CALLBACK_data_set
    __swig_getmethods__["data"] = _MantisAPI.MICRO_CAMERA_WHITEBALANCE_CALLBACK_data_get
    if _newclass:
        data = _swig_property(_MantisAPI.MICRO_CAMERA_WHITEBALANCE_CALLBACK_data_get, _MantisAPI.MICRO_CAMERA_WHITEBALANCE_CALLBACK_data_set)

    def __init__(self):
        this = _MantisAPI.new_MICRO_CAMERA_WHITEBALANCE_CALLBACK()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_MICRO_CAMERA_WHITEBALANCE_CALLBACK
    __del__ = lambda self: None
MICRO_CAMERA_WHITEBALANCE_CALLBACK_swigregister = _MantisAPI.MICRO_CAMERA_WHITEBALANCE_CALLBACK_swigregister
MICRO_CAMERA_WHITEBALANCE_CALLBACK_swigregister(MICRO_CAMERA_WHITEBALANCE_CALLBACK)

class MICRO_CAMERA_FRAME_CALLBACK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MICRO_CAMERA_FRAME_CALLBACK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MICRO_CAMERA_FRAME_CALLBACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _MantisAPI.MICRO_CAMERA_FRAME_CALLBACK_f_set
    __swig_getmethods__["f"] = _MantisAPI.MICRO_CAMERA_FRAME_CALLBACK_f_get
    if _newclass:
        f = _swig_property(_MantisAPI.MICRO_CAMERA_FRAME_CALLBACK_f_get, _MantisAPI.MICRO_CAMERA_FRAME_CALLBACK_f_set)
    __swig_setmethods__["data"] = _MantisAPI.MICRO_CAMERA_FRAME_CALLBACK_data_set
    __swig_getmethods__["data"] = _MantisAPI.MICRO_CAMERA_FRAME_CALLBACK_data_get
    if _newclass:
        data = _swig_property(_MantisAPI.MICRO_CAMERA_FRAME_CALLBACK_data_get, _MantisAPI.MICRO_CAMERA_FRAME_CALLBACK_data_set)

    def __init__(self):
        this = _MantisAPI.new_MICRO_CAMERA_FRAME_CALLBACK()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_MICRO_CAMERA_FRAME_CALLBACK
    __del__ = lambda self: None
MICRO_CAMERA_FRAME_CALLBACK_swigregister = _MantisAPI.MICRO_CAMERA_FRAME_CALLBACK_swigregister
MICRO_CAMERA_FRAME_CALLBACK_swigregister(MICRO_CAMERA_FRAME_CALLBACK)

class NEW_MICRO_CAMERA_CALLBACK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NEW_MICRO_CAMERA_CALLBACK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NEW_MICRO_CAMERA_CALLBACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _MantisAPI.NEW_MICRO_CAMERA_CALLBACK_f_set
    __swig_getmethods__["f"] = _MantisAPI.NEW_MICRO_CAMERA_CALLBACK_f_get
    if _newclass:
        f = _swig_property(_MantisAPI.NEW_MICRO_CAMERA_CALLBACK_f_get, _MantisAPI.NEW_MICRO_CAMERA_CALLBACK_f_set)
    __swig_setmethods__["data"] = _MantisAPI.NEW_MICRO_CAMERA_CALLBACK_data_set
    __swig_getmethods__["data"] = _MantisAPI.NEW_MICRO_CAMERA_CALLBACK_data_get
    if _newclass:
        data = _swig_property(_MantisAPI.NEW_MICRO_CAMERA_CALLBACK_data_get, _MantisAPI.NEW_MICRO_CAMERA_CALLBACK_data_set)

    def __init__(self):
        this = _MantisAPI.new_NEW_MICRO_CAMERA_CALLBACK()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_NEW_MICRO_CAMERA_CALLBACK
    __del__ = lambda self: None
NEW_MICRO_CAMERA_CALLBACK_swigregister = _MantisAPI.NEW_MICRO_CAMERA_CALLBACK_swigregister
NEW_MICRO_CAMERA_CALLBACK_swigregister(NEW_MICRO_CAMERA_CALLBACK)

class MICRO_CAMERA_CALLBACKS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MICRO_CAMERA_CALLBACKS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MICRO_CAMERA_CALLBACKS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["autoGainCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoGainCallback_set
    __swig_getmethods__["autoGainCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoGainCallback_get
    if _newclass:
        autoGainCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_autoGainCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_autoGainCallback_set)
    __swig_setmethods__["autoFramerateCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoFramerateCallback_set
    __swig_getmethods__["autoFramerateCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoFramerateCallback_get
    if _newclass:
        autoFramerateCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_autoFramerateCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_autoFramerateCallback_set)
    __swig_setmethods__["autoSaturationCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoSaturationCallback_set
    __swig_getmethods__["autoSaturationCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoSaturationCallback_get
    if _newclass:
        autoSaturationCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_autoSaturationCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_autoSaturationCallback_set)
    __swig_setmethods__["autoShutterCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoShutterCallback_set
    __swig_getmethods__["autoShutterCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoShutterCallback_get
    if _newclass:
        autoShutterCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_autoShutterCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_autoShutterCallback_set)
    __swig_setmethods__["autoWhiteBalanceCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoWhiteBalanceCallback_set
    __swig_getmethods__["autoWhiteBalanceCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoWhiteBalanceCallback_get
    if _newclass:
        autoWhiteBalanceCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_autoWhiteBalanceCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_autoWhiteBalanceCallback_set)
    __swig_setmethods__["autoJpegQualityCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoJpegQualityCallback_set
    __swig_getmethods__["autoJpegQualityCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoJpegQualityCallback_get
    if _newclass:
        autoJpegQualityCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_autoJpegQualityCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_autoJpegQualityCallback_set)
    __swig_setmethods__["autoDenoiseCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoDenoiseCallback_set
    __swig_getmethods__["autoDenoiseCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoDenoiseCallback_get
    if _newclass:
        autoDenoiseCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_autoDenoiseCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_autoDenoiseCallback_set)
    __swig_setmethods__["autoContrastCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoContrastCallback_set
    __swig_getmethods__["autoContrastCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoContrastCallback_get
    if _newclass:
        autoContrastCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_autoContrastCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_autoContrastCallback_set)
    __swig_setmethods__["autoSharpeningCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoSharpeningCallback_set
    __swig_getmethods__["autoSharpeningCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoSharpeningCallback_get
    if _newclass:
        autoSharpeningCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_autoSharpeningCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_autoSharpeningCallback_set)
    __swig_setmethods__["autoExposureCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoExposureCallback_set
    __swig_getmethods__["autoExposureCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_autoExposureCallback_get
    if _newclass:
        autoExposureCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_autoExposureCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_autoExposureCallback_set)
    __swig_setmethods__["irFilterCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_irFilterCallback_set
    __swig_getmethods__["irFilterCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_irFilterCallback_get
    if _newclass:
        irFilterCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_irFilterCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_irFilterCallback_set)
    __swig_setmethods__["exposureCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_exposureCallback_set
    __swig_getmethods__["exposureCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_exposureCallback_get
    if _newclass:
        exposureCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_exposureCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_exposureCallback_set)
    __swig_setmethods__["focusCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_focusCallback_set
    __swig_getmethods__["focusCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_focusCallback_get
    if _newclass:
        focusCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_focusCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_focusCallback_set)
    __swig_setmethods__["framerateCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_framerateCallback_set
    __swig_getmethods__["framerateCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_framerateCallback_get
    if _newclass:
        framerateCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_framerateCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_framerateCallback_set)
    __swig_setmethods__["gainCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_gainCallback_set
    __swig_getmethods__["gainCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_gainCallback_get
    if _newclass:
        gainCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_gainCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_gainCallback_set)
    __swig_setmethods__["saturationCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_saturationCallback_set
    __swig_getmethods__["saturationCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_saturationCallback_get
    if _newclass:
        saturationCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_saturationCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_saturationCallback_set)
    __swig_setmethods__["sharpeningCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_sharpeningCallback_set
    __swig_getmethods__["sharpeningCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_sharpeningCallback_get
    if _newclass:
        sharpeningCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_sharpeningCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_sharpeningCallback_set)
    __swig_setmethods__["deNoiseCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_deNoiseCallback_set
    __swig_getmethods__["deNoiseCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_deNoiseCallback_get
    if _newclass:
        deNoiseCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_deNoiseCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_deNoiseCallback_set)
    __swig_setmethods__["shutterCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_shutterCallback_set
    __swig_getmethods__["shutterCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_shutterCallback_get
    if _newclass:
        shutterCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_shutterCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_shutterCallback_set)
    __swig_setmethods__["contrastCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_contrastCallback_set
    __swig_getmethods__["contrastCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_contrastCallback_get
    if _newclass:
        contrastCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_contrastCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_contrastCallback_set)
    __swig_setmethods__["jpegQualityCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_jpegQualityCallback_set
    __swig_getmethods__["jpegQualityCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_jpegQualityCallback_get
    if _newclass:
        jpegQualityCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_jpegQualityCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_jpegQualityCallback_set)
    __swig_setmethods__["colorTempCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_colorTempCallback_set
    __swig_getmethods__["colorTempCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_colorTempCallback_get
    if _newclass:
        colorTempCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_colorTempCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_colorTempCallback_set)
    __swig_setmethods__["whiteBalanceCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_whiteBalanceCallback_set
    __swig_getmethods__["whiteBalanceCallback"] = _MantisAPI.MICRO_CAMERA_CALLBACKS_whiteBalanceCallback_get
    if _newclass:
        whiteBalanceCallback = _swig_property(_MantisAPI.MICRO_CAMERA_CALLBACKS_whiteBalanceCallback_get, _MantisAPI.MICRO_CAMERA_CALLBACKS_whiteBalanceCallback_set)

    def __init__(self):
        this = _MantisAPI.new_MICRO_CAMERA_CALLBACKS()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_MICRO_CAMERA_CALLBACKS
    __del__ = lambda self: None
MICRO_CAMERA_CALLBACKS_swigregister = _MantisAPI.MICRO_CAMERA_CALLBACKS_swigregister
MICRO_CAMERA_CALLBACKS_swigregister(MICRO_CAMERA_CALLBACKS)

class TRANSMITTER_CALLBACKS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRANSMITTER_CALLBACKS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRANSMITTER_CALLBACKS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["totalBytes"] = _MantisAPI.TRANSMITTER_CALLBACKS_totalBytes_set
    __swig_getmethods__["totalBytes"] = _MantisAPI.TRANSMITTER_CALLBACKS_totalBytes_get
    if _newclass:
        totalBytes = _swig_property(_MantisAPI.TRANSMITTER_CALLBACKS_totalBytes_get, _MantisAPI.TRANSMITTER_CALLBACKS_totalBytes_set)
    __swig_setmethods__["sentBytes"] = _MantisAPI.TRANSMITTER_CALLBACKS_sentBytes_set
    __swig_getmethods__["sentBytes"] = _MantisAPI.TRANSMITTER_CALLBACKS_sentBytes_get
    if _newclass:
        sentBytes = _swig_property(_MantisAPI.TRANSMITTER_CALLBACKS_sentBytes_get, _MantisAPI.TRANSMITTER_CALLBACKS_sentBytes_set)
    __swig_setmethods__["sentFrames"] = _MantisAPI.TRANSMITTER_CALLBACKS_sentFrames_set
    __swig_getmethods__["sentFrames"] = _MantisAPI.TRANSMITTER_CALLBACKS_sentFrames_get
    if _newclass:
        sentFrames = _swig_property(_MantisAPI.TRANSMITTER_CALLBACKS_sentFrames_get, _MantisAPI.TRANSMITTER_CALLBACKS_sentFrames_set)
    __swig_setmethods__["droppedFrames"] = _MantisAPI.TRANSMITTER_CALLBACKS_droppedFrames_set
    __swig_getmethods__["droppedFrames"] = _MantisAPI.TRANSMITTER_CALLBACKS_droppedFrames_get
    if _newclass:
        droppedFrames = _swig_property(_MantisAPI.TRANSMITTER_CALLBACKS_droppedFrames_get, _MantisAPI.TRANSMITTER_CALLBACKS_droppedFrames_set)

    def __init__(self):
        this = _MantisAPI.new_TRANSMITTER_CALLBACKS()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_TRANSMITTER_CALLBACKS
    __del__ = lambda self: None
TRANSMITTER_CALLBACKS_swigregister = _MantisAPI.TRANSMITTER_CALLBACKS_swigregister
TRANSMITTER_CALLBACKS_swigregister(TRANSMITTER_CALLBACKS)

class MESSAGE_CALLBACK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MESSAGE_CALLBACK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MESSAGE_CALLBACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _MantisAPI.MESSAGE_CALLBACK_f_set
    __swig_getmethods__["f"] = _MantisAPI.MESSAGE_CALLBACK_f_get
    if _newclass:
        f = _swig_property(_MantisAPI.MESSAGE_CALLBACK_f_get, _MantisAPI.MESSAGE_CALLBACK_f_set)
    __swig_setmethods__["data"] = _MantisAPI.MESSAGE_CALLBACK_data_set
    __swig_getmethods__["data"] = _MantisAPI.MESSAGE_CALLBACK_data_get
    if _newclass:
        data = _swig_property(_MantisAPI.MESSAGE_CALLBACK_data_get, _MantisAPI.MESSAGE_CALLBACK_data_set)

    def __init__(self):
        this = _MantisAPI.new_MESSAGE_CALLBACK()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_MESSAGE_CALLBACK
    __del__ = lambda self: None
MESSAGE_CALLBACK_swigregister = _MantisAPI.MESSAGE_CALLBACK_swigregister
MESSAGE_CALLBACK_swigregister(MESSAGE_CALLBACK)

class SYSTEM_CALLBACKS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SYSTEM_CALLBACKS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SYSTEM_CALLBACKS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["infoCallback"] = _MantisAPI.SYSTEM_CALLBACKS_infoCallback_set
    __swig_getmethods__["infoCallback"] = _MantisAPI.SYSTEM_CALLBACKS_infoCallback_get
    if _newclass:
        infoCallback = _swig_property(_MantisAPI.SYSTEM_CALLBACKS_infoCallback_get, _MantisAPI.SYSTEM_CALLBACKS_infoCallback_set)
    __swig_setmethods__["warningCallback"] = _MantisAPI.SYSTEM_CALLBACKS_warningCallback_set
    __swig_getmethods__["warningCallback"] = _MantisAPI.SYSTEM_CALLBACKS_warningCallback_get
    if _newclass:
        warningCallback = _swig_property(_MantisAPI.SYSTEM_CALLBACKS_warningCallback_get, _MantisAPI.SYSTEM_CALLBACKS_warningCallback_set)
    __swig_setmethods__["errorCallback"] = _MantisAPI.SYSTEM_CALLBACKS_errorCallback_set
    __swig_getmethods__["errorCallback"] = _MantisAPI.SYSTEM_CALLBACKS_errorCallback_get
    if _newclass:
        errorCallback = _swig_property(_MantisAPI.SYSTEM_CALLBACKS_errorCallback_get, _MantisAPI.SYSTEM_CALLBACKS_errorCallback_set)
    __swig_setmethods__["criticalErrorCallback"] = _MantisAPI.SYSTEM_CALLBACKS_criticalErrorCallback_set
    __swig_getmethods__["criticalErrorCallback"] = _MantisAPI.SYSTEM_CALLBACKS_criticalErrorCallback_get
    if _newclass:
        criticalErrorCallback = _swig_property(_MantisAPI.SYSTEM_CALLBACKS_criticalErrorCallback_get, _MantisAPI.SYSTEM_CALLBACKS_criticalErrorCallback_set)

    def __init__(self):
        this = _MantisAPI.new_SYSTEM_CALLBACKS()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MantisAPI.delete_SYSTEM_CALLBACKS
    __del__ = lambda self: None
SYSTEM_CALLBACKS_swigregister = _MantisAPI.SYSTEM_CALLBACKS_swigregister
SYSTEM_CALLBACKS_swigregister(SYSTEM_CALLBACKS)


_MantisAPI.ATL_WHITE_BALANCE_MODE_MANUAL_swigconstant(_MantisAPI)
ATL_WHITE_BALANCE_MODE_MANUAL = _MantisAPI.ATL_WHITE_BALANCE_MODE_MANUAL

_MantisAPI.ATL_WHITE_BALANCE_MODE_AUTO_swigconstant(_MantisAPI)
ATL_WHITE_BALANCE_MODE_AUTO = _MantisAPI.ATL_WHITE_BALANCE_MODE_AUTO

_MantisAPI.ATL_WHITE_BALANCE_MODE_SUNLIGHT_swigconstant(_MantisAPI)
ATL_WHITE_BALANCE_MODE_SUNLIGHT = _MantisAPI.ATL_WHITE_BALANCE_MODE_SUNLIGHT

_MantisAPI.ATL_WHITE_BALANCE_MODE_FLUORESCENT_swigconstant(_MantisAPI)
ATL_WHITE_BALANCE_MODE_FLUORESCENT = _MantisAPI.ATL_WHITE_BALANCE_MODE_FLUORESCENT

_MantisAPI.ATL_WHITE_BALANCE_MODE_SHADE_swigconstant(_MantisAPI)
ATL_WHITE_BALANCE_MODE_SHADE = _MantisAPI.ATL_WHITE_BALANCE_MODE_SHADE

_MantisAPI.ATL_WHITE_BALANCE_MODE_TUNGSTEN_swigconstant(_MantisAPI)
ATL_WHITE_BALANCE_MODE_TUNGSTEN = _MantisAPI.ATL_WHITE_BALANCE_MODE_TUNGSTEN

_MantisAPI.ATL_WHITE_BALANCE_MODE_CLOUDY_swigconstant(_MantisAPI)
ATL_WHITE_BALANCE_MODE_CLOUDY = _MantisAPI.ATL_WHITE_BALANCE_MODE_CLOUDY

_MantisAPI.ATL_WHITE_BALANCE_MODE_INCANDESCENT_swigconstant(_MantisAPI)
ATL_WHITE_BALANCE_MODE_INCANDESCENT = _MantisAPI.ATL_WHITE_BALANCE_MODE_INCANDESCENT

_MantisAPI.ATL_WHITE_BALANCE_MODE_HORIZON_swigconstant(_MantisAPI)
ATL_WHITE_BALANCE_MODE_HORIZON = _MantisAPI.ATL_WHITE_BALANCE_MODE_HORIZON

_MantisAPI.ATL_WHITE_BALANCE_MODE_FLASH_swigconstant(_MantisAPI)
ATL_WHITE_BALANCE_MODE_FLASH = _MantisAPI.ATL_WHITE_BALANCE_MODE_FLASH

_MantisAPI.ATL_NOISE_REDUCTION_MODE_OFF_swigconstant(_MantisAPI)
ATL_NOISE_REDUCTION_MODE_OFF = _MantisAPI.ATL_NOISE_REDUCTION_MODE_OFF

_MantisAPI.ATL_NOISE_REDUCTION_MODE_FAST_swigconstant(_MantisAPI)
ATL_NOISE_REDUCTION_MODE_FAST = _MantisAPI.ATL_NOISE_REDUCTION_MODE_FAST

_MantisAPI.ATL_NOISE_REDUCTION_MODE_HQ_swigconstant(_MantisAPI)
ATL_NOISE_REDUCTION_MODE_HQ = _MantisAPI.ATL_NOISE_REDUCTION_MODE_HQ

_MantisAPI.ATL_EDGE_ENHANCE_MODE_OFF_swigconstant(_MantisAPI)
ATL_EDGE_ENHANCE_MODE_OFF = _MantisAPI.ATL_EDGE_ENHANCE_MODE_OFF

_MantisAPI.ATL_EDGE_ENHANCE_MODE_FAST_swigconstant(_MantisAPI)
ATL_EDGE_ENHANCE_MODE_FAST = _MantisAPI.ATL_EDGE_ENHANCE_MODE_FAST

_MantisAPI.ATL_EDGE_ENHANCE_MODE_HQ_swigconstant(_MantisAPI)
ATL_EDGE_ENHANCE_MODE_HQ = _MantisAPI.ATL_EDGE_ENHANCE_MODE_HQ

_MantisAPI.ATL_FLICKER_REDUCTION_MODE_OFF_swigconstant(_MantisAPI)
ATL_FLICKER_REDUCTION_MODE_OFF = _MantisAPI.ATL_FLICKER_REDUCTION_MODE_OFF

_MantisAPI.ATL_FLICKER_REDUCTION_MODE_AUTO_swigconstant(_MantisAPI)
ATL_FLICKER_REDUCTION_MODE_AUTO = _MantisAPI.ATL_FLICKER_REDUCTION_MODE_AUTO

_MantisAPI.ATL_FLICKER_REDUCTION_MODE_50HZ_swigconstant(_MantisAPI)
ATL_FLICKER_REDUCTION_MODE_50HZ = _MantisAPI.ATL_FLICKER_REDUCTION_MODE_50HZ

_MantisAPI.ATL_FLICKER_REDUCTION_MODE_60HZ_swigconstant(_MantisAPI)
ATL_FLICKER_REDUCTION_MODE_60HZ = _MantisAPI.ATL_FLICKER_REDUCTION_MODE_60HZ

_MantisAPI.ATL_SCALE_MODE_ALL_swigconstant(_MantisAPI)
ATL_SCALE_MODE_ALL = _MantisAPI.ATL_SCALE_MODE_ALL

_MantisAPI.ATL_SCALE_MODE_4K_swigconstant(_MantisAPI)
ATL_SCALE_MODE_4K = _MantisAPI.ATL_SCALE_MODE_4K

_MantisAPI.ATL_SCALE_MODE_HD_swigconstant(_MantisAPI)
ATL_SCALE_MODE_HD = _MantisAPI.ATL_SCALE_MODE_HD

_MantisAPI.ATL_SENSOR_MODE_4K_30_swigconstant(_MantisAPI)
ATL_SENSOR_MODE_4K_30 = _MantisAPI.ATL_SENSOR_MODE_4K_30

_MantisAPI.ATL_SENSOR_MODE_4K_60_swigconstant(_MantisAPI)
ATL_SENSOR_MODE_4K_60 = _MantisAPI.ATL_SENSOR_MODE_4K_60

_MantisAPI.ATL_SENSOR_MODE_HD_60_swigconstant(_MantisAPI)
ATL_SENSOR_MODE_HD_60 = _MantisAPI.ATL_SENSOR_MODE_HD_60

_MantisAPI.ATL_TILING_1_1_2_swigconstant(_MantisAPI)
ATL_TILING_1_1_2 = _MantisAPI.ATL_TILING_1_1_2

_MantisAPI.ATL_TILING_2_2_2_swigconstant(_MantisAPI)
ATL_TILING_2_2_2 = _MantisAPI.ATL_TILING_2_2_2

_MantisAPI.ATL_TILE_4K_swigconstant(_MantisAPI)
ATL_TILE_4K = _MantisAPI.ATL_TILE_4K

_MantisAPI.ATL_TILE_HD_swigconstant(_MantisAPI)
ATL_TILE_HD = _MantisAPI.ATL_TILE_HD

_MantisAPI.ATL_OUTPUT_MODE_RAW_swigconstant(_MantisAPI)
ATL_OUTPUT_MODE_RAW = _MantisAPI.ATL_OUTPUT_MODE_RAW

_MantisAPI.ATL_OUTPUT_MODE_JPEG_swigconstant(_MantisAPI)
ATL_OUTPUT_MODE_JPEG = _MantisAPI.ATL_OUTPUT_MODE_JPEG

_MantisAPI.ATL_OUTPUT_MODE_H264_swigconstant(_MantisAPI)
ATL_OUTPUT_MODE_H264 = _MantisAPI.ATL_OUTPUT_MODE_H264

_MantisAPI.ATL_MODE_NONE_swigconstant(_MantisAPI)
ATL_MODE_NONE = _MantisAPI.ATL_MODE_NONE

_MantisAPI.ATL_MODE_GRAY_swigconstant(_MantisAPI)
ATL_MODE_GRAY = _MantisAPI.ATL_MODE_GRAY

_MantisAPI.ATL_MODE_GRBG_swigconstant(_MantisAPI)
ATL_MODE_GRBG = _MantisAPI.ATL_MODE_GRBG

_MantisAPI.ATL_MODE_BGGR_swigconstant(_MantisAPI)
ATL_MODE_BGGR = _MantisAPI.ATL_MODE_BGGR

_MantisAPI.ATL_MODE_RGB_swigconstant(_MantisAPI)
ATL_MODE_RGB = _MantisAPI.ATL_MODE_RGB

_MantisAPI.ATL_MODE_BGR_swigconstant(_MantisAPI)
ATL_MODE_BGR = _MantisAPI.ATL_MODE_BGR

_MantisAPI.ATL_MODE_JPEG_RGB_swigconstant(_MantisAPI)
ATL_MODE_JPEG_RGB = _MantisAPI.ATL_MODE_JPEG_RGB

_MantisAPI.ATL_MODE_YUV_422_swigconstant(_MantisAPI)
ATL_MODE_YUV_422 = _MantisAPI.ATL_MODE_YUV_422

_MantisAPI.ATL_MODE_BGRA_swigconstant(_MantisAPI)
ATL_MODE_BGRA = _MantisAPI.ATL_MODE_BGRA

_MantisAPI.ATL_MODE_BT601_YUV_422_swigconstant(_MantisAPI)
ATL_MODE_BT601_YUV_422 = _MantisAPI.ATL_MODE_BT601_YUV_422

_MantisAPI.ATL_MODE_RGGB_swigconstant(_MantisAPI)
ATL_MODE_RGGB = _MantisAPI.ATL_MODE_RGGB

_MantisAPI.ATL_MODE_I420_swigconstant(_MantisAPI)
ATL_MODE_I420 = _MantisAPI.ATL_MODE_I420

_MantisAPI.ATL_MODE_FGRAY_swigconstant(_MantisAPI)
ATL_MODE_FGRAY = _MantisAPI.ATL_MODE_FGRAY

_MantisAPI.ATL_MODE_FGRBG_swigconstant(_MantisAPI)
ATL_MODE_FGRBG = _MantisAPI.ATL_MODE_FGRBG

_MantisAPI.ATL_MODE_FBGGR_swigconstant(_MantisAPI)
ATL_MODE_FBGGR = _MantisAPI.ATL_MODE_FBGGR

_MantisAPI.ATL_MODE_FRGB_swigconstant(_MantisAPI)
ATL_MODE_FRGB = _MantisAPI.ATL_MODE_FRGB

_MantisAPI.ATL_MODE_FBGR_swigconstant(_MantisAPI)
ATL_MODE_FBGR = _MantisAPI.ATL_MODE_FBGR

_MantisAPI.ATL_MODE_FJPEG_RGB_swigconstant(_MantisAPI)
ATL_MODE_FJPEG_RGB = _MantisAPI.ATL_MODE_FJPEG_RGB

_MantisAPI.ATL_MODE_FYUV_422_swigconstant(_MantisAPI)
ATL_MODE_FYUV_422 = _MantisAPI.ATL_MODE_FYUV_422

_MantisAPI.ATL_MODE_FBGRA_swigconstant(_MantisAPI)
ATL_MODE_FBGRA = _MantisAPI.ATL_MODE_FBGRA

_MantisAPI.ATL_MODE_FBT601_YUV_422_swigconstant(_MantisAPI)
ATL_MODE_FBT601_YUV_422 = _MantisAPI.ATL_MODE_FBT601_YUV_422

_MantisAPI.ATL_MODE_FRGGB_swigconstant(_MantisAPI)
ATL_MODE_FRGGB = _MantisAPI.ATL_MODE_FRGGB

_MantisAPI.DEFAULT_FRAME_WAIT_swigconstant(_MantisAPI)
DEFAULT_FRAME_WAIT = _MantisAPI.DEFAULT_FRAME_WAIT

def mCamConnect(tegraip, tegraport):
    return _MantisAPI.mCamConnect(tegraip, tegraport)
mCamConnect = _MantisAPI.mCamConnect

def returnPointer(ptr):
    return _MantisAPI.returnPointer(ptr)
returnPointer = _MantisAPI.returnPointer

def saveMCamFrame(frame, location):
    return _MantisAPI.saveMCamFrame(frame, location)
saveMCamFrame = _MantisAPI.saveMCamFrame

def mCamDisconnect(tegraip, clientport):
    return _MantisAPI.mCamDisconnect(tegraip, clientport)
mCamDisconnect = _MantisAPI.mCamDisconnect

def getNumberOfMCams():
    return _MantisAPI.getNumberOfMCams()
getNumberOfMCams = _MantisAPI.getNumberOfMCams

def startMCamStream(mcam, clientPort):
    return _MantisAPI.startMCamStream(mcam, clientPort)
startMCamStream = _MantisAPI.startMCamStream

def stopMCamStream(mcam, clientPort):
    return _MantisAPI.stopMCamStream(mcam, clientPort)
stopMCamStream = _MantisAPI.stopMCamStream

def setMCamStreamFilter(mcam, port, mode):
    return _MantisAPI.setMCamStreamFilter(mcam, port, mode)
setMCamStreamFilter = _MantisAPI.setMCamStreamFilter

def setMCamPropertyCallbacks(mcam, callbacks):
    return _MantisAPI.setMCamPropertyCallbacks(mcam, callbacks)
setMCamPropertyCallbacks = _MantisAPI.setMCamPropertyCallbacks

def setMCamAutoExposure(mcam, on):
    return _MantisAPI.setMCamAutoExposure(mcam, on)
setMCamAutoExposure = _MantisAPI.setMCamAutoExposure

def setMCamAutoFocus(mcam, on):
    return _MantisAPI.setMCamAutoFocus(mcam, on)
setMCamAutoFocus = _MantisAPI.setMCamAutoFocus

def setMCamAutoFramerate(mcam, on):
    return _MantisAPI.setMCamAutoFramerate(mcam, on)
setMCamAutoFramerate = _MantisAPI.setMCamAutoFramerate

def setMCamAutoJpegQuality(mcam, on):
    return _MantisAPI.setMCamAutoJpegQuality(mcam, on)
setMCamAutoJpegQuality = _MantisAPI.setMCamAutoJpegQuality

def setMCamAutoGain(mcam, on):
    return _MantisAPI.setMCamAutoGain(mcam, on)
setMCamAutoGain = _MantisAPI.setMCamAutoGain

def setMCamAutoSaturation(mcam, on):
    return _MantisAPI.setMCamAutoSaturation(mcam, on)
setMCamAutoSaturation = _MantisAPI.setMCamAutoSaturation

def setMCamAutoShutter(mcam, on):
    return _MantisAPI.setMCamAutoShutter(mcam, on)
setMCamAutoShutter = _MantisAPI.setMCamAutoShutter

def setMCamAutoContrast(mcam, on):
    return _MantisAPI.setMCamAutoContrast(mcam, on)
setMCamAutoContrast = _MantisAPI.setMCamAutoContrast

def setMCamAutoSharpening(mcam, on):
    return _MantisAPI.setMCamAutoSharpening(mcam, on)
setMCamAutoSharpening = _MantisAPI.setMCamAutoSharpening

def setMCamAutoDeNoise(mcam, on):
    return _MantisAPI.setMCamAutoDeNoise(mcam, on)
setMCamAutoDeNoise = _MantisAPI.setMCamAutoDeNoise

def setMCamExposure(mcam, exposure):
    return _MantisAPI.setMCamExposure(mcam, exposure)
setMCamExposure = _MantisAPI.setMCamExposure

def setMCamFocus(mcam, focus):
    return _MantisAPI.setMCamFocus(mcam, focus)
setMCamFocus = _MantisAPI.setMCamFocus

def setMCamFocusNear(mcam, step):
    return _MantisAPI.setMCamFocusNear(mcam, step)
setMCamFocusNear = _MantisAPI.setMCamFocusNear

def setMCamFocusFar(mcam, step):
    return _MantisAPI.setMCamFocusFar(mcam, step)
setMCamFocusFar = _MantisAPI.setMCamFocusFar

def setMCamFramerate(mcam, framerate):
    return _MantisAPI.setMCamFramerate(mcam, framerate)
setMCamFramerate = _MantisAPI.setMCamFramerate

def setMCamJpegQuality(mcam, jpegQuality):
    return _MantisAPI.setMCamJpegQuality(mcam, jpegQuality)
setMCamJpegQuality = _MantisAPI.setMCamJpegQuality

def setMCamGain(mcam, gain):
    return _MantisAPI.setMCamGain(mcam, gain)
setMCamGain = _MantisAPI.setMCamGain

def setMCamSaturation(mcam, saturation):
    return _MantisAPI.setMCamSaturation(mcam, saturation)
setMCamSaturation = _MantisAPI.setMCamSaturation

def setMCamShutter(mcam, shutter):
    return _MantisAPI.setMCamShutter(mcam, shutter)
setMCamShutter = _MantisAPI.setMCamShutter

def setMCamContrast(mcam, contrast):
    return _MantisAPI.setMCamContrast(mcam, contrast)
setMCamContrast = _MantisAPI.setMCamContrast

def setMCamSharpening(mcam, sharpening):
    return _MantisAPI.setMCamSharpening(mcam, sharpening)
setMCamSharpening = _MantisAPI.setMCamSharpening

def setMCamDeNoise(mcam, denoise):
    return _MantisAPI.setMCamDeNoise(mcam, denoise)
setMCamDeNoise = _MantisAPI.setMCamDeNoise

def setMCamWhiteBalance(mcam, red, blue, green):
    return _MantisAPI.setMCamWhiteBalance(mcam, red, blue, green)
setMCamWhiteBalance = _MantisAPI.setMCamWhiteBalance

def setMCamWhiteBalanceMode(mcam, mode):
    return _MantisAPI.setMCamWhiteBalanceMode(mcam, mode)
setMCamWhiteBalanceMode = _MantisAPI.setMCamWhiteBalanceMode

def setMCamSensorMode(mcam, mode):
    return _MantisAPI.setMCamSensorMode(mcam, mode)
setMCamSensorMode = _MantisAPI.setMCamSensorMode

def setMCamColorTemp(mcam, colorTemp):
    return _MantisAPI.setMCamColorTemp(mcam, colorTemp)
setMCamColorTemp = _MantisAPI.setMCamColorTemp

def setMCamIrFilter(mcam, on):
    return _MantisAPI.setMCamIrFilter(mcam, on)
setMCamIrFilter = _MantisAPI.setMCamIrFilter

def getMCamAutoExposure(mcam):
    return _MantisAPI.getMCamAutoExposure(mcam)
getMCamAutoExposure = _MantisAPI.getMCamAutoExposure

def getMCamAutoFramerate(mcam):
    return _MantisAPI.getMCamAutoFramerate(mcam)
getMCamAutoFramerate = _MantisAPI.getMCamAutoFramerate

def getMCamAutoSaturation(mcam):
    return _MantisAPI.getMCamAutoSaturation(mcam)
getMCamAutoSaturation = _MantisAPI.getMCamAutoSaturation

def getMCamAutoShutter(mcam):
    return _MantisAPI.getMCamAutoShutter(mcam)
getMCamAutoShutter = _MantisAPI.getMCamAutoShutter

def getMCamAutoWhiteBalance(mcam):
    return _MantisAPI.getMCamAutoWhiteBalance(mcam)
getMCamAutoWhiteBalance = _MantisAPI.getMCamAutoWhiteBalance

def getMCamAutoGain(mcam):
    return _MantisAPI.getMCamAutoGain(mcam)
getMCamAutoGain = _MantisAPI.getMCamAutoGain

def getMCamAutoSharpening(mcam):
    return _MantisAPI.getMCamAutoSharpening(mcam)
getMCamAutoSharpening = _MantisAPI.getMCamAutoSharpening

def getMCamAutoContrast(mcam):
    return _MantisAPI.getMCamAutoContrast(mcam)
getMCamAutoContrast = _MantisAPI.getMCamAutoContrast

def getMCamAutoDenoise(mcam):
    return _MantisAPI.getMCamAutoDenoise(mcam)
getMCamAutoDenoise = _MantisAPI.getMCamAutoDenoise

def getMCamAutoJpegQuality(mcam):
    return _MantisAPI.getMCamAutoJpegQuality(mcam)
getMCamAutoJpegQuality = _MantisAPI.getMCamAutoJpegQuality

def getMCamExposure(mcam):
    return _MantisAPI.getMCamExposure(mcam)
getMCamExposure = _MantisAPI.getMCamExposure

def getMCamGain(mcam):
    return _MantisAPI.getMCamGain(mcam)
getMCamGain = _MantisAPI.getMCamGain

def getMCamFocus(mcam):
    return _MantisAPI.getMCamFocus(mcam)
getMCamFocus = _MantisAPI.getMCamFocus

def getMCamShutter(mcam):
    return _MantisAPI.getMCamShutter(mcam)
getMCamShutter = _MantisAPI.getMCamShutter

def getMCamSaturation(mcam):
    return _MantisAPI.getMCamSaturation(mcam)
getMCamSaturation = _MantisAPI.getMCamSaturation

def getMCamFramerate(mcam):
    return _MantisAPI.getMCamFramerate(mcam)
getMCamFramerate = _MantisAPI.getMCamFramerate

def getMCamContrast(mcam):
    return _MantisAPI.getMCamContrast(mcam)
getMCamContrast = _MantisAPI.getMCamContrast

def getMCamDeNoise(mcam):
    return _MantisAPI.getMCamDeNoise(mcam)
getMCamDeNoise = _MantisAPI.getMCamDeNoise

def getMCamSharpening(mcam):
    return _MantisAPI.getMCamSharpening(mcam)
getMCamSharpening = _MantisAPI.getMCamSharpening

def getMCamJpegQuality(mcam):
    return _MantisAPI.getMCamJpegQuality(mcam)
getMCamJpegQuality = _MantisAPI.getMCamJpegQuality

def getMCamColorTemp(mcam):
    return _MantisAPI.getMCamColorTemp(mcam)
getMCamColorTemp = _MantisAPI.getMCamColorTemp

def getMCamIrFilter(mcam):
    return _MantisAPI.getMCamIrFilter(mcam)
getMCamIrFilter = _MantisAPI.getMCamIrFilter

def getMCamWhiteBalanceMode(mcam):
    return _MantisAPI.getMCamWhiteBalanceMode(mcam)
getMCamWhiteBalanceMode = _MantisAPI.getMCamWhiteBalanceMode

def getMCamWhiteBalance(mcam):
    return _MantisAPI.getMCamWhiteBalance(mcam)
getMCamWhiteBalance = _MantisAPI.getMCamWhiteBalance

def getMCamGainRange(mcam):
    return _MantisAPI.getMCamGainRange(mcam)
getMCamGainRange = _MantisAPI.getMCamGainRange

def getMCamExposureRange(mcam):
    return _MantisAPI.getMCamExposureRange(mcam)
getMCamExposureRange = _MantisAPI.getMCamExposureRange

def getMCamShutterRange(mcam):
    return _MantisAPI.getMCamShutterRange(mcam)
getMCamShutterRange = _MantisAPI.getMCamShutterRange

def getMCamSaturationRange(mcam):
    return _MantisAPI.getMCamSaturationRange(mcam)
getMCamSaturationRange = _MantisAPI.getMCamSaturationRange

def getMCamFramerateRange(mcam):
    return _MantisAPI.getMCamFramerateRange(mcam)
getMCamFramerateRange = _MantisAPI.getMCamFramerateRange

def getMCamContrastRange(mcam):
    return _MantisAPI.getMCamContrastRange(mcam)
getMCamContrastRange = _MantisAPI.getMCamContrastRange

def getMCamDeNoiseRange(mcam):
    return _MantisAPI.getMCamDeNoiseRange(mcam)
getMCamDeNoiseRange = _MantisAPI.getMCamDeNoiseRange

def getMCamSharpeningRange(mcam):
    return _MantisAPI.getMCamSharpeningRange(mcam)
getMCamSharpeningRange = _MantisAPI.getMCamSharpeningRange

def getMCamJpegQualityRange(mcam):
    return _MantisAPI.getMCamJpegQualityRange(mcam)
getMCamJpegQualityRange = _MantisAPI.getMCamJpegQualityRange

def getMCamColorTempRange(mcam):
    return _MantisAPI.getMCamColorTempRange(mcam)
getMCamColorTempRange = _MantisAPI.getMCamColorTempRange

def getMCamWhiteBalanceRange(mcam):
    return _MantisAPI.getMCamWhiteBalanceRange(mcam)
getMCamWhiteBalanceRange = _MantisAPI.getMCamWhiteBalanceRange

def saveCameraState(saveDir):
    return _MantisAPI.saveCameraState(saveDir)
saveCameraState = _MantisAPI.saveCameraState

def loadCameraState(loadDir):
    return _MantisAPI.loadCameraState(loadDir)
loadCameraState = _MantisAPI.loadCameraState

def printCameraProperties():
    return _MantisAPI.printCameraProperties()
printCameraProperties = _MantisAPI.printCameraProperties

def setSystemCallbacks(callbacks):
    return _MantisAPI.setSystemCallbacks(callbacks)
setSystemCallbacks = _MantisAPI.setSystemCallbacks

def setNewMCamCallback(callable):
    return _MantisAPI.setNewMCamCallback(callable)
setNewMCamCallback = _MantisAPI.setNewMCamCallback

def pyapi_setMCamFrameCallback(callable):
    return _MantisAPI.pyapi_setMCamFrameCallback(callable)
pyapi_setMCamFrameCallback = _MantisAPI.pyapi_setMCamFrameCallback

def pyapi_grabMCamFrame(clientport, wTime=1.0):
    return _MantisAPI.pyapi_grabMCamFrame(clientport, wTime)
pyapi_grabMCamFrame = _MantisAPI.pyapi_grabMCamFrame

def bufferToImage(meta, buffer):
    from PIL import Image
# for some reason, meta.m_mode causes the python interpreter to crash
    if meta.m_mode == _MantisPyAPI.ATL_MODE_GRAY:
        image = Image.frombuffer('L', (meta.m_width,meta.m_height), buffer, 'raw', 'L', 0, 1)
    elif meta.m_mode == _MantisPyAPI.ATL_MODE_RGB:
        image = Image.frombuffer('RGB', (meta.m_width,meta.m_height), buffer, 'raw', 'RGB', 0, 1)
    elif meta.m_mode == _MantisPyAPI.ATL_MODE_JPEG_RGB:
        from io import BytesIO
        file_jpgdata = BytesIO(buffer)
        image = Image.open(file_jpgdata)
    else:
        print("Image mode: " + str(meta.m_mode) + " not supported.")

    return image

def setMCamFrameCallback(cb):
    def dataCallback(meta,buffer):
        image = bufferToImage(meta,buffer)
        cb(meta,image)

    _MantisPyAPI.pyapi_setMCamFrameCallback(dataCallback);

def grabMCamFrame(hand, waitTime):
    (meta, buffer) = _MantisPyAPI.pyapi_grabMCamFrame()
    return (bufferToImage(meta,buffer), meta)

# This file is compatible with both classic and new-style classes.

cvar = _MantisAPI.cvar
ATL_AUTO_EXPOSURE = cvar.ATL_AUTO_EXPOSURE
ATL_AUTO_FRAMERATE = cvar.ATL_AUTO_FRAMERATE
ATL_AUTO_GAIN = cvar.ATL_AUTO_GAIN
ATL_AUTO_SATURATION = cvar.ATL_AUTO_SATURATION
ATL_AUTO_SHUTTER = cvar.ATL_AUTO_SHUTTER
ATL_AUTO_WHITEBALANCE = cvar.ATL_AUTO_WHITEBALANCE
ATL_AUTO_SHARPENING = cvar.ATL_AUTO_SHARPENING
ATL_AUTO_CONTRAST = cvar.ATL_AUTO_CONTRAST
ATL_AUTO_DENOISE = cvar.ATL_AUTO_DENOISE
ATL_AUTO_FOCUS = cvar.ATL_AUTO_FOCUS
ATL_AUTO_JPEG_QUALITY = cvar.ATL_AUTO_JPEG_QUALITY
ATL_FRAMERATE = cvar.ATL_FRAMERATE
ATL_FRAMERATE_DIVIDER = cvar.ATL_FRAMERATE_DIVIDER
ATL_FRAMERATE_RANGE = cvar.ATL_FRAMERATE_RANGE
ATL_FOCUS = cvar.ATL_FOCUS
ATL_GAIN = cvar.ATL_GAIN
ATL_COLOR_TEMP = cvar.ATL_COLOR_TEMP
ATL_COLOR_TEMP_RANGE = cvar.ATL_COLOR_TEMP_RANGE
ATL_COLOR_TEMP_ESTIMATE = cvar.ATL_COLOR_TEMP_ESTIMATE
ATL_SCENE_LUX_ESTIMATE = cvar.ATL_SCENE_LUX_ESTIMATE
ATL_GAIN_RANGE = cvar.ATL_GAIN_RANGE
ATL_SATURATION = cvar.ATL_SATURATION
ATL_SATURATION_RANGE = cvar.ATL_SATURATION_RANGE
ATL_EXPOSURE_TARGET = cvar.ATL_EXPOSURE_TARGET
ATL_EXPOSURE_TARGET_RANGE = cvar.ATL_EXPOSURE_TARGET_RANGE
ATL_WHITEBALANCE = cvar.ATL_WHITEBALANCE
ATL_WHITEBALANCE_GAIN_RANGE = cvar.ATL_WHITEBALANCE_GAIN_RANGE
ATL_WHITEBALANCE_MODE = cvar.ATL_WHITEBALANCE_MODE
ATL_SHUTTER = cvar.ATL_SHUTTER
ATL_SHUTTER_RANGE = cvar.ATL_SHUTTER_RANGE
ATL_PIXEL_CLOCK = cvar.ATL_PIXEL_CLOCK
ATL_SENSOR_ROI = cvar.ATL_SENSOR_ROI
ATL_WHITEBALANCE_OFFSET = cvar.ATL_WHITEBALANCE_OFFSET
ATL_FOCUS_RANGE = cvar.ATL_FOCUS_RANGE
ATL_COLOR_MAT_ENABLE = cvar.ATL_COLOR_MAT_ENABLE
ATL_FLICKER_MODE = cvar.ATL_FLICKER_MODE
ATL_WHITEBALANCE_REGION = cvar.ATL_WHITEBALANCE_REGION
ATL_FRAME_DURATION_RANGE = cvar.ATL_FRAME_DURATION_RANGE
ATL_IMAGE_CENTER_OFFSET = cvar.ATL_IMAGE_CENTER_OFFSET
ATL_SENSOR_MODE = cvar.ATL_SENSOR_MODE
ATL_SCALE_MODE = cvar.ATL_SCALE_MODE
ATL_NUM_SENSOR_MODES = cvar.ATL_NUM_SENSOR_MODES
ATL_SUPPORTS_FOCUS = cvar.ATL_SUPPORTS_FOCUS
ATL_IR_FILTER = cvar.ATL_IR_FILTER
ATL_SUPPORTS_APERTURE = cvar.ATL_SUPPORTS_APERTURE
ATL_APERTURE = cvar.ATL_APERTURE
ATL_APERTURE_RANGE = cvar.ATL_APERTURE_RANGE
ATL_SENSOR_ID = cvar.ATL_SENSOR_ID
ATL_MODULE_ID = cvar.ATL_MODULE_ID
ATL_NUM_CAMERAS = cvar.ATL_NUM_CAMERAS
ATL_MIPI_SLOT = cvar.ATL_MIPI_SLOT
ATL_TILE_ID = cvar.ATL_TILE_ID
ATL_RESOLUTION = cvar.ATL_RESOLUTION
ATL_FOCUS_INTERRUPT = cvar.ATL_FOCUS_INTERRUPT
ATL_NET_TX_RATE = cvar.ATL_NET_TX_RATE
ATL_NET_RX_RATE = cvar.ATL_NET_RX_RATE
ATL_CPU_HZ = cvar.ATL_CPU_HZ
ATL_CPU_NUM_CORES = cvar.ATL_CPU_NUM_CORES
ATL_GPU_HZ = cvar.ATL_GPU_HZ
ATL_GPU_ID = cvar.ATL_GPU_ID
ATL_NUM_GPUS = cvar.ATL_NUM_GPUS
ATL_RAM_TOTAL = cvar.ATL_RAM_TOTAL
ATL_RAM_FREE = cvar.ATL_RAM_FREE
ATL_CPU_LOAD = cvar.ATL_CPU_LOAD
ATL_GPU_LOAD = cvar.ATL_GPU_LOAD
ATL_STORAGE_USE = cvar.ATL_STORAGE_USE
ATL_STORAGE_SIZE = cvar.ATL_STORAGE_SIZE
ATL_UPTIME = cvar.ATL_UPTIME
ATL_CPU_TEMP = cvar.ATL_CPU_TEMP
ATL_GPU_TEMP = cvar.ATL_GPU_TEMP
ATL_CPU_CRITICAL_TEMP = cvar.ATL_CPU_CRITICAL_TEMP
ATL_GPU_CRITICAL_TEMP = cvar.ATL_GPU_CRITICAL_TEMP
ATL_BOARD_TEMP = cvar.ATL_BOARD_TEMP
ATL_BOARD_CRITICAL_TEMP = cvar.ATL_BOARD_CRITICAL_TEMP
ATL_NOISE_REDUCTION_MODE = cvar.ATL_NOISE_REDUCTION_MODE
ATL_NOISE_REDUCTION_STRENGTH = cvar.ATL_NOISE_REDUCTION_STRENGTH
ATL_NOISE_REDUCTION_STRENGTH_RANGE = cvar.ATL_NOISE_REDUCTION_STRENGTH_RANGE
ATL_EDGE_ENHANCE_MODE = cvar.ATL_EDGE_ENHANCE_MODE
ATL_EDGE_ENHANCE_STRENGTH = cvar.ATL_EDGE_ENHANCE_STRENGTH
ATL_EDGE_ENHANCE_STRENGTH_RANGE = cvar.ATL_EDGE_ENHANCE_STRENGTH_RANGE
ATL_OUTPUT_MODE = cvar.ATL_OUTPUT_MODE
ATL_COMPRESSION_TYPE = cvar.ATL_COMPRESSION_TYPE
ATL_JPEG_QUALITY = cvar.ATL_JPEG_QUALITY
ATL_JPEG_QUALITY_RANGE = cvar.ATL_JPEG_QUALITY_RANGE
ATL_H264_BITRATE = cvar.ATL_H264_BITRATE
ATL_H264_PROFILE = cvar.ATL_H264_PROFILE
ATL_H264_LEVEL_MAJOR = cvar.ATL_H264_LEVEL_MAJOR
ATL_H264_LEVEL_MINOR = cvar.ATL_H264_LEVEL_MINOR
ATL_H264_IFRAME_INTERVAL = cvar.ATL_H264_IFRAME_INTERVAL
ACI_MAX_CACHE_SIZE = cvar.ACI_MAX_CACHE_SIZE
ACI_CACHE_FRAMERATE = cvar.ACI_CACHE_FRAMERATE
ACI_TRANSMITTER_QMAX = cvar.ACI_TRANSMITTER_QMAX
ACI_ADD_TRANSMITTER_CONNECTION = cvar.ACI_ADD_TRANSMITTER_CONNECTION
ACI_REMOVE_TRANSMITTER_CONNECTION = cvar.ACI_REMOVE_TRANSMITTER_CONNECTION
ACI_START_STREAMING_MCAM = cvar.ACI_START_STREAMING_MCAM
ACI_STOP_STREAMING_MCAM = cvar.ACI_STOP_STREAMING_MCAM
ACI_STREAMING_TILE_FILTER = cvar.ACI_STREAMING_TILE_FILTER
ACI_TRANSMITTER_TOTAL_BYTES = cvar.ACI_TRANSMITTER_TOTAL_BYTES
ACI_TRANSMITTER_SENT_BYTES = cvar.ACI_TRANSMITTER_SENT_BYTES
ACI_TRANSMITTER_SENT_FRAMES = cvar.ACI_TRANSMITTER_SENT_FRAMES
ACI_TRANSMITTER_DROPPED_FRAMES = cvar.ACI_TRANSMITTER_DROPPED_FRAMES
ATL_STREAMING_INTERRUPT = cvar.ATL_STREAMING_INTERRUPT
ATL_STREAMING_POLICY = cvar.ATL_STREAMING_POLICY
ATL_NEW_CAMERA_STREAM_INTERRUPT = cvar.ATL_NEW_CAMERA_STREAM_INTERRUPT
ATL_STREAM_ID = cvar.ATL_STREAM_ID
ATL_IP_ADDR_INTERRUPT = cvar.ATL_IP_ADDR_INTERRUPT
ACI_NEW_BURST_INTERRUPT = cvar.ACI_NEW_BURST_INTERRUPT
ACI_FRAME_COUNT = cvar.ACI_FRAME_COUNT
ACI_SENT_FAILURE_COUNT = cvar.ACI_SENT_FAILURE_COUNT
ATL_CONTRAST = cvar.ATL_CONTRAST
ATL_CONTRAST_RANGE = cvar.ATL_CONTRAST_RANGE
ATL_SHARPENING = cvar.ATL_SHARPENING
ATL_SHARPENING_RANGE = cvar.ATL_SHARPENING_RANGE
ATL_DENOISE = cvar.ATL_DENOISE
ATL_DENOISE_RANGE = cvar.ATL_DENOISE_RANGE
ATL_INTERRUPT_CREATED = cvar.ATL_INTERRUPT_CREATED
ATL_PROPERTY_CREATED = cvar.ATL_PROPERTY_CREATED
ATL_PROPERTYMANAGER_CREATED = cvar.ATL_PROPERTYMANAGER_CREATED
ATL_INTERRUPT_REMOVED = cvar.ATL_INTERRUPT_REMOVED
ATL_PROPERTY_REMOVED = cvar.ATL_PROPERTY_REMOVED
ATL_PROPERTYMANAGER_REMOVED = cvar.ATL_PROPERTYMANAGER_REMOVED
ATL_DONE_SYNCING = cvar.ATL_DONE_SYNCING
ATL_GAIN_RANGE_MIN = cvar.ATL_GAIN_RANGE_MIN
ATL_GAIN_RANGE_MAX = cvar.ATL_GAIN_RANGE_MAX
ATL_CONTRAST_RANGE_MIN = cvar.ATL_CONTRAST_RANGE_MIN
ATL_CONTRAST_RANGE_MAX = cvar.ATL_CONTRAST_RANGE_MAX
ATL_SHARPENING_RANGE_MIN = cvar.ATL_SHARPENING_RANGE_MIN
ATL_SHARPENING_RANGE_MAX = cvar.ATL_SHARPENING_RANGE_MAX
ATL_DENOISE_RANGE_MIN = cvar.ATL_DENOISE_RANGE_MIN
ATL_DENOISE_RANGE_MAX = cvar.ATL_DENOISE_RANGE_MAX
ATL_SHUTTER_RANGE_MIN = cvar.ATL_SHUTTER_RANGE_MIN
ATL_SHUTTER_RANGE_MAX = cvar.ATL_SHUTTER_RANGE_MAX
ATL_SATURATION_RANGE_MIN = cvar.ATL_SATURATION_RANGE_MIN
ATL_SATURATION_RANGE_MAX = cvar.ATL_SATURATION_RANGE_MAX
ATL_FRAMERATE_RANGE_MIN = cvar.ATL_FRAMERATE_RANGE_MIN
ATL_FRAMERATE_RANGE_MAX = cvar.ATL_FRAMERATE_RANGE_MAX
ATL_JPEG_QUALITY_RANGE_MIN = cvar.ATL_JPEG_QUALITY_RANGE_MIN
ATL_JPEG_QUALITY_RANGE_MAX = cvar.ATL_JPEG_QUALITY_RANGE_MAX
ATL_EXPOSURE_TARGET_RANGE_MIN = cvar.ATL_EXPOSURE_TARGET_RANGE_MIN
ATL_EXPOSURE_TARGET_RANGE_MAX = cvar.ATL_EXPOSURE_TARGET_RANGE_MAX
ATL_COLOR_TEMP_RANGE_MIN = cvar.ATL_COLOR_TEMP_RANGE_MIN
ATL_COLOR_TEMP_RANGE_MAX = cvar.ATL_COLOR_TEMP_RANGE_MAX
ATL_WHITEBALANCE_GAIN_RANGE_MIN = cvar.ATL_WHITEBALANCE_GAIN_RANGE_MIN
ATL_WHITEBALANCE_GAIN_RANGE_MAX = cvar.ATL_WHITEBALANCE_GAIN_RANGE_MAX
ATL_INFO_MESSAGE = cvar.ATL_INFO_MESSAGE
ATL_WARNING_MESSAGE = cvar.ATL_WARNING_MESSAGE
ATL_ERROR_MESSAGE = cvar.ATL_ERROR_MESSAGE
ATL_CRITICAL_ERROR_MESSAGE = cvar.ATL_CRITICAL_ERROR_MESSAGE
V2_CREATE_CAMERA_INTERRUPT = cvar.V2_CREATE_CAMERA_INTERRUPT
V2_DELETE_CAMERA_INTERRUPT = cvar.V2_DELETE_CAMERA_INTERRUPT
V2_CONNECTED_TO_CAMERA = cvar.V2_CONNECTED_TO_CAMERA
V2_RECEIVE_CAMERA_DATA = cvar.V2_RECEIVE_CAMERA_DATA
V2_OPEN_LIVE_VIEWER_INTERRUPT = cvar.V2_OPEN_LIVE_VIEWER_INTERRUPT
V2_OPEN_CLIP_VIEWER_INTERRUPT = cvar.V2_OPEN_CLIP_VIEWER_INTERRUPT
V2_CLOSE_VIEWER_INTERRUPT = cvar.V2_CLOSE_VIEWER_INTERRUPT
V2_CAMERA_CREATED_INTERRUPT = cvar.V2_CAMERA_CREATED_INTERRUPT
V2_START_RECORDING_INTERRUPT = cvar.V2_START_RECORDING_INTERRUPT
V2_STOP_RECORDING_INTERRUPT = cvar.V2_STOP_RECORDING_INTERRUPT
V2_CLIP_CREATED_INTERRUPT = cvar.V2_CLIP_CREATED_INTERRUPT
V2_IMAGE_REQUEST_INTERRUPT = cvar.V2_IMAGE_REQUEST_INTERRUPT
V2_REQUEST_STORED_CLIPS_INTERRUPT = cvar.V2_REQUEST_STORED_CLIPS_INTERRUPT
ACI_SAVE_STATE_INTERRUPT = cvar.ACI_SAVE_STATE_INTERRUPT
ACI_LOAD_STATE_INTERRUPT = cvar.ACI_LOAD_STATE_INTERRUPT

